* Commands>
** execute-src-block:
(save-excursion (progn (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
(save-excursion (let () (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
and then name the block you want to execute automatically:

** find-file:
[[elisp:(org-babel-tangle)
]]
(find-file-other-frame "~/INI/hydra-cfg.el")
(load "~/INI/hydra-cfg.el")
(org-babel-tangle)
** auto-tangle-block:
#+NAME: auto-tangle-block
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
(save-buffer)
(universal-argument)
(universal-argument)
(org-babel-tangle)
;; (find-file-other-frame "~/INI/hydra-cfg.el")
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
 #+end_src

 
#+begin_src emacs-lisp :results output silent :tangle no
(save-buffer)
(org-babel-tangle)
(load "~/INI/hydra-cfg.el")
(load "~/ELs/BuYn/reader.el")
 #+end_src

from
#+HEADER: :tangle ~/INI/hydra-cfg.el

#+PROPERTY:    tangle ~/INI/hydra-cfg.el

:header-args: :tangle  "~/INI/hydra-cfg.el"
* docs
** link to turials
*** content
(eww-of "https://www.learn-clojurescript.com/")
*** git
(eww-of "https://github.com/kendru/learn-cljs")
https://github.com/kendru/learn-cljs

https://github.com/kendru/learn-cljs.git

https://github.com/kendru/learn-cljs/blob/main/code/lesson-8/weather/resources/public/css/style.css
*** fers src and new gen
(eww-of "https://www.learn-clojurescript.com/section-1/lesson-5-bootstrapping-a-clojurescript-project/")
*** stoped
 * [[https://www.learn-clojurescript.com/section-1/lesson-6-receiving-rapid-feedback-with-figwheel/][Receiving Rapid Feedback With Figwheel]]

** manuals
*** info from new page
Welcome to the ClojureScript browser REPL.

This page hosts your REPL and application evaluation environment. Validate the connection by typing (js/alert "Hello CLJS!") in the REPL.

To provide your own custom page, place an index.html file in the REPL launch directory, starting with this template:

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
  </head>
  <body>
    <script src="out/main.js" type="text/javascript"></script>
  </body>
</html>
*** new project
clj -X:new :template figwheel-main :name learn-cljs/weather :args '["+deps" "--reagent"]'
**** explane
Since this command includes some unfamiliar syntax, let’s take a
moment to dissect it. As we just learned, the first part of the
command, clj -X:new, invokes the clj-new/create function, and
the remainder of the arguments are passed to this function. We use
Clojure keyword syntax to pass :template, :name, and :args
options. :template unsurprisingly specifies the name of the
template to use, :name is the name of the project to create, and :
args are additional arguments that the figwheel-main template
will interpret. Since figwheel-main is not a built-in template, clj-new
will fetch the template from Clojure’s central repository, Clojars.

We need to understand a bit of convention in order to make sense
of the structure of the generated project. Most Clojure and
ClojureScript projects use a namespace-qualified package name to
reduce the likelihood of naming conflicts between projects that are
pushed to a central registry. The namespace is the portion before
the forward slash and is commonly the GitHub username of the
developer or the reverse domain name of the organization that
owns the code, although it can be anything you like. For this book,
we will use learn-cljs as the namespace for all of our projects.1

Project Namespace and Name 

Project Namespace and Name

The final argument is a bit odd-looking: :args '["+deps"
"--reagent"]'. This passes a vector of strings as arguments to the
figwheel-main template. The exact arguments supported vary from
template to template, but Figwheel uses these to configure
optional extensions to the base template. In our case, we are
specifying that we want to use a deps.edn file to manage
dependencies, and we want to include the Reagent web framework.
*** --serve flag
You can test that this file still works by running the built in simple
web server via the --serve flag:

clj -M -m cljs.main --serve

*** help from fresh figwheel-main project
Generating fresh figwheel-main project.
  To get started:
  -->  Change into the 'weather' directory
  -->  Start build with 'clojure -M:fig:build'
*** repl help
In the cljs.user ns, controls can be called without ns ie. (conns) instead of (figwheel.repl/conns)
    Docs: (doc function-name-here)
    Exit: :cljs/quit
 Results: Stored in vars *1, *2, *3, *e holds last exception object
[Rebel readline] Type :repl/help for online help info
*** figwheel readme.md 
To get an interactive development environment run:

    clojure -A:fig:build

This will auto compile and send all changes to the browser without the
need to reload. After the compilation process is complete, you will
get a Browser Connected REPL. An easy way to try it is:

    (js/alert "Am I connected?")

and you should see an alert in the browser window.

To clean all compiled files:

    rm -rf target/public

To create a production build run:

  rm -rf target/public
  clojure -A:fig:min
*** creat project structure
mkdir hello_seymore
cd hello_seymore
touch project.clj
touch index.html
mkdir -p src/hello_seymore
touch src/hello_seymore/core.cljs

* Log
** weather
*** new project
clj -X:new :template figwheel-main :name learn-cljs/weather :args '["+deps" "--reagent"]'
$ clj -X:new :template figwheel-main :name learn-cljs/weather :args 
*** bilde
cd weather                                               # <1>
clj -A:fig:build                                         # <2>
*** Running Figwheel
*** run in eshell
**** run  eshell
#+begin_src elisp :results output silent
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
	(evil-window-split)
				(eshell)
				(evil-quit)
				(switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** comannds
cd weather
clj -A:fig:build
*** repls commands
**** test
(in-ns 'learn-cljs.weather)                                ;; <1>
;; nil

(def input (.createElement js/document "input"))           ;; <2>
;; #'learn-cljs.weather/input                              ;; <3>

(.appendChild (.-body js/document) input)
;; #object[HTMLInputElement [object HTMLInputElement]]

(set! (.-placeholder input) "Enter something")             ;; <4>
;; "Enter something"

(defn handle-input [e]                                     ;; <5>
  (swap! app-state assoc :text (-> e .-target .-value)))
;; #'learn-cljs.weather/handle-input

(set! (.-onkeyup input) handle-input)
;; #object[learn_cljs$weather$handle_input ...]
**** refactored
(defn event-value [e] (-> e .-target .-value))
;; #'learn-cljs.weather/event-value

(defn update-text [value]
  (swap! app-state assoc :text value))
;; #'learn-cljs.weather/update-text

(defn handle-input [e]
  (update-text (event-value e)))
;; #'learn-cljs.weather/handle-input
**** add button
(in-ns 'learn-cljs.weather)                                ;; <1>
** starbase
*** run in eshell
**** run eshell
#+begin_src elisp :results output silent
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
	(evil-window-split)
				(eshell)
				(evil-quit)
				(switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** comannds
cd starbase
clj -A:fig:build
*** 1
(defn prompt [game current]                                ;; <1>
  (let [scene (get game current)                           ;; <2>
        type (:type scene)]
    (io/clear term)
    (when (or (= :win type)                                ;; <3>
              (= :lose type))
      (io/print term
                (if (= :win type)                          ;; <4>
                    "You've Won! "
                    "Game Over ")))
    (io/println term (:title scene))                       ;; <5>
    (io/println term (:dialog scene))
    (io/read term #(on-answer game current %))))           ;; <6>
* Sorce files
** Sorce files project ferst
:PROPERTIES:
:header-args: :mkdirp yes
:END:
*** deps.edn
:PROPERTIES:
:header-args: :tangle  deps.edn
:END:
#+begin_src edn
{:deps {org.clojure/clojurescript {:mvn/version "1.10.773"}}
 :paths ["src"]
:aliases
  {:dev {:main-opts ["-m" "cljs.main"
                     "--compile" "my-cljs-project.core"
                     "--repl"]}}}
#+end_src
*** src/my_cljs_project/core.cljs
:PROPERTIES:
:header-args: :tangle  src/my_cljs_project/core.cljs
:END:
#+begin_src clojure
(ns my-cljs-project.core)                                  ;; <1>

(js/alert "Hello World!")                                   ;; <2>
#+end_src
*** index.html
:PROPERTIES:
:header-args: :tangle  index.html
:END:
#+begin_src edn
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
  </head>
  <body>
    <script src="out/main.js" type="text/javascript"></script>
  </body>
</html>
#+end_src
** weather
:PROPERTIES:
:header-args: :mkdirp yes
:END:
*** core.cljs
:PROPERTIES:
:header-args: :tangle  weather/src/learn_cljs/weather.cljs
:END:
**** link
[[file:weather/src/learn_cljs/weather.cljs::(ns ^:figwheel-hooks learn-cljs.weather]]
**** ns
#+begin_src clojure
(ns ^:figwheel-hooks learn-cljs.weather                    ;; <1>
  (:require
   [goog.dom :as gdom]
   [reagent.dom :as rdom]
   [reagent.core :as r]
	 [ajax.core :as ajax]))
#+end_src
**** defonce
#+begin_src clojure
(defonce app-state (r/atom {:title "WhichWeather"
                            :postal-code ""
                            :api-key ""
                            :temperatures {:today {:label "Today"
                                                   :value nil}
                                           :tomorrow {:label "Tomorrow"
                                                      :value nil}}}))
#+end_src
**** ajax get forecast
***** handle-response
#+begin_src clojure
(defn handle-response [resp]
  (let [today (get-in resp ["list" 0 "main" "temp"])       ;; <1>
        tomorrow (get-in resp ["list" 8 "main" "temp"])]
    (swap! app-state                                       ;; <2>
        update-in [:temperatures :today :value] (constantly today))
    (swap! app-state
        update-in [:temperatures :tomorrow :value] (constantly tomorrow))))
#+end_src
***** get-forecast!
#+begin_src clojure
(defn get-forecast! []
  (let [postal-code (:postal-code @app-state)]             ;; <1>
    (ajax/GET "http://api.openweathermap.org/data/2.5/forecast"
         {:params {"q" postal-code
                   "appid" "12b0904cfab748cbcb6e98a5dc7c7ac4"
                   "units" "imperial"}
          :handler handle-response})))                     ;; <2>
#+end_src
**** structur
#+begin_src clojure
(defn title []
  [:h1 (:title @app-state)])

(defn temperature [temp]                                   ;; <1>
  [:div {:class "temperature"}
   [:div {:class "value"}
    (:value temp)]
   [:h2 (:label temp)]])

(defn postal-code []
  [:div {:class "postal-code"}
    [:h3 "Enter your postal code"]
  	[:input {:type "text"
					:placeholder "api-key"
					:value (:api-key @app-state)
					:on-change #(swap! app-state assoc :api-key (-> % .-target .-value))}]
  	[:input {:type "text"
					:placeholder "Postal Code"
					:value (:postal-code @app-state)
					:on-change #(swap! app-state assoc :postal-code (-> % .-target .-value))}]
    [:button {:on-click get-forecast!} "Go"]])

(defn app []
  [:div {:class "app"}
   [title]                                                 ;; <2>
   [:div {:class "temperatures"}
    (for [temp (vals (:temperatures @app-state))]          ;; <3>
      [temperature temp])]
   [postal-code]])

#+end_src
**** render
#+begin_src clojure
(defn mount-app-element []                                 ;; <4>
  (rdom/render [app] (gdom/getElement "app")))

(mount-app-element)

(defn ^:after-load on-reload []                            ;; <4>
  (mount-app-element))
#+end_src

*** dev.cljs.edn
:PROPERTIES:
:header-args: :tangle  weather/dev.cljs.edn
:END:
[[file:weather/dev.cljs.edn::^{:watch-dirs \["test" "src"\]]]
#+begin_src clojure
^{:watch-dirs ["src"]
  :css-dirs ["resources/public/css"]
  :auto-testing true
   }
{:main learn-cljs.weather}
#+end_src

*** deps.edn
:PROPERTIES:
:header-args: :tangle  weather/deps.edn
:END:
[[file:weather/deps.edn::{:deps {org.clojure/clojure {:mvn/version "1.10.0"}]]
#+begin_src clojure
{:deps {org.clojure/clojure {:mvn/version "1.10.0"}
        org.clojure/clojurescript {:mvn/version "1.11.4"}
        cljsjs/react {:mvn/version "17.0.2-0"}
        cljsjs/react-dom {:mvn/version "17.0.2-0"}
        reagent/reagent {:mvn/version "1.1.1" }
        cljs-ajax {:mvn/version "0.8.1"} ;; Added
        }
 :paths ["src" "resources"]
 :aliases {:fig {:extra-deps
                 {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}
                  org.slf4j/slf4j-nop {:mvn/version "1.7.30"}
                  com.bhauman/figwheel-main {:mvn/version "0.2.17"}}
                 :extra-paths ["target" "test"]}
           :build {:main-opts ["-m" "figwheel.main" "-b" "dev" "-r"]}
           :min   {:main-opts ["-m" "figwheel.main" "-O" "advanced" "-bo" "dev"]}
           :test  {:main-opts ["-m" "figwheel.main" "-co" "test.cljs.edn" "-m" "learn-cljs.test-runner"]}}}
#+end_src

*** style.css
:PROPERTIES:
:header-args: :tangle  weather/resources/public/css/style.css
:END:
[[file:weather/resources/public/css/style.css::/* some style */]]
#+begin_src css
body {
  font-family: Helvetica, Arial, sans-serif;
  background-color: #02a4ff;
  color: #ffffff;
}

h1 {
  font-weight: 300;
}

button {
  border-left: none;
  border-top-right-radius: 5px;
  border-bottom-right-radius: 5px;
  background: #205184;
  border: none;
  line-height: 20px;
  color: #fff;
  padding: 2px 12px;
  font-weight: bold;
}

.temperatures {
  display: flex;
}

.temperatures > .temperature {
  margin-right: 20px;
  background: #fff;
  color: #333;
  text-align: center;
  flex-basis: 150px;
  border-radius: 10px;
  
  display: flex;
  flex-direction: column;
}

.temperatures > .temperature > .value {
  font-size: 130%;
  font-weight: lighter;
  padding: 4px;
  flex-basis: 26px;
}

.temperatures > .temperature > h2 {
  margin: 0;
  background-color: #69C9FF;
  color: #ffffff;
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
}
#+end_src
** starbase
:PROPERTIES:
:header-args: :mkdirp yes
:END:
*** starbase.cljs
:PROPERTIES:
:header-args: :tangle  starbase/src/learn_cljs/starbase.cljs
:END:
[[file:starbase/src/learn_cljs/starbase.cljs::(ns learn-cljs.starbase]]
#+begin_src clojure
(ns learn-cljs.starbase
  (:require [bterm.core :as bterm]
            [bterm.io :as io]
            [learn-cljs.starbase.data :as data]
            [goog.dom :as gdom]))

(enable-console-print!)

(def term
  (bterm/attach (gdom/getElement "app")
                {:prompt "=> "
                 :font-size 14}))

(declare on-answer)

(defn prompt [game current]                                ;; <1>
  (let [scene (get game current)                           ;; <2>
        type (:type scene)]
    (io/clear term)
    (when (or (= :win type)                                ;; <3>
              (= :lose type))
      (io/print term
                (if (= :win type)                          ;; <4>
                    "You've Won! "
                    "Game Over ")))
    (io/println term (:title scene))                       ;; <5>
    (io/println term (:dialog scene))
    (io/read term #(on-answer game current %))))           ;; <6>

(defn on-answer [game current answer])

(prompt data/game :start)
#+end_src
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/starbase/src/learn_cljs/starbase.cljs
** starbase_E
* project comands
:PROPERTIES:
:header-args: :tangle no
:END:
** save буфер фреймы проекта
#+begin_src emacs-lisp  :results output silent
(use-package burly
 :ensure t
 ;; :config
	)
(burly-bookmark-frames "weather buffers")
(burly-bookmark-frames "buffers LAST SAVE")
(bookmark-save)
#+end_src
** run eshell in org root
clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl
#+begin_src elisp :results output silent
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
				(evil-window-split)
				(eshell)
				(evil-quit)
				(switch-to-buffer-other-frame buffer-name-to-close))
#+end_src

			;; (execute-kbd-macro "A \C-m")
** new project
clj -X:new :template figwheel-main :name learn-cljs/weather :args '["+deps" "--reagent"]'
$ clj -X:new :template figwheel-main :name learn-cljs/weather :args 
** cider
If you have a Clojure project in your file system and want CIDER to launch an nREPL session for it, simply visit a file that belongs to the project, and type M-x cider-jack-in RET.[1] CIDER will start an nREPL server and automatically connect to it.
	In Clojure(Script) buffers the command cider-jack-in is bound to C-c C-x (C-)j (C-)j. 

** run console in org root
clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl
#+begin_src elisp :results output silent
(buyn-shell-start "konsole")
(evil-previous-line)
(org-cycle)
(delete-other-windows)
#+end_src

** run repl
clojure -m cljs.main --compile my-cljs-project.core --repl
#+begin_src eshell
clj -m cljs.main --compile my-cljs-project.core --repl


#+end_src

#+RESULTS:
** run console with command
#+begin_src elisp :results output silent
(buyn-shell-start "konsole -e /bin/bash --rcfile <(clj -M:dev)")
(evil-previous-line)
(org-cycle)
(delete-other-windows)
#+end_src

* get info
** tree weather
#+begin_src eshell
tree -a ./weather/
#+end_src

#+RESULTS:
#+begin_example
./weather/
|-- .gitignore
|-- README.md
|-- deps.edn
|-- dev.cljs.edn
|-- figwheel-main.edn
|-- resources
|   `-- public
|       |-- css
|       |   `-- style.css
|       |-- index.html
|       `-- test.html
|-- src
|   `-- learn_cljs
|       `-- weather.cljs
|-- target
|   `-- public
|-- test
|   `-- learn_cljs
|       |-- test_runner.cljs
|       `-- weather_test.cljs
`-- test.cljs.edn

10 directories, 12 files
#+end_example

#+begin_src eshell
tree -a ../..
#+end_src

** tree
#+begin_src eshell
tree -a 
#+end_src

#+RESULTS:
#+begin_example
.
|-- .cpcache
|   |-- 2249099292.basis
|   |-- 2249099292.cp
|   |-- 2249099292.main
|   |-- 3387647126.basis
|   `-- 3387647126.cp
|-- .git
|   |-- COMMIT_EDITMSG
|   |-- HEAD
|   |-- branches
|   |-- config
|   |-- description
|   |-- hooks
|   |   |-- applypatch-msg.sample
|   |   |-- commit-msg.sample
|   |   |-- fsmonitor-watchman.sample
|   |   |-- post-update.sample
|   |   |-- pre-applypatch.sample
|   |   |-- pre-commit.sample
|   |   |-- pre-merge-commit.sample
|   |   |-- pre-push.sample
|   |   |-- pre-rebase.sample
|   |   |-- pre-receive.sample
|   |   |-- prepare-commit-msg.sample
|   |   |-- push-to-checkout.sample
|   |   |-- sendemail-validate.sample
|   |   `-- update.sample
|   |-- index
|   |-- info
|   |   `-- exclude
|   |-- logs
|   |   |-- HEAD
|   |   `-- refs
|   |       `-- heads
|   |           `-- master
|   |-- objects
|   |   |-- 0c
|   |   |   `-- bbd03849c4225b912c29c5cc1a1eb95e004406
|   |   |-- 0e
|   |   |   `-- 870ed249cff3194b020b449194b8cba79a49d3
|   |   |-- 17
|   |   |   `-- a3e74549f59d14a57aaa5d946f87798ecd2d27
|   |   |-- 1f
|   |   |   `-- 93999b09a0a7b82e830a7b9090f0551d0f280e
|   |   |-- 32
|   |   |   `-- 4d99a0a2eb602de5639061c10905a14f2ec25c
|   |   |-- 45
|   |   |   `-- 374bcfb2934e4cb107dd25d948d3b9a008f723
|   |   |-- 50
|   |   |   `-- 6579660ab72264aaa634f26bf26ae7ffbdc418
|   |   |-- 64
|   |   |   `-- 5a17d70fa7f64e2c3119372d253464688197af
|   |   |-- 65
|   |   |   `-- a5e52de8afa978f2bb081da49308b6cd34291d
|   |   |-- 68
|   |   |   `-- d8c0c529bb0772b6720ad9e763d778f384d54c
|   |   |-- 6a
|   |   |   `-- 3417b8d9d0a2fec34cf79ef2b46cc63a28b7d8
|   |   |-- 71
|   |   |   `-- 0abb86e53c60cd50c35ef8e3c3974ecd5a166c
|   |   |-- 78
|   |   |   `-- 57d22f338d2bf5a11f2c9989019274e89e11bf
|   |   |-- 8e
|   |   |   `-- 9d30e7d6e5c5c5cf8797dddb89c36afcd3ba53
|   |   |-- a4
|   |   |   `-- 5fa94e812daa483ce03c6d57b8406559ba308c
|   |   |-- a9
|   |   |   `-- 3c6e57355bd80bf964904be7322c2f011e0d22
|   |   |-- af
|   |   |   `-- 4f6bcd17f983891885b2da5bb50d94247eafde
|   |   |-- b5
|   |   |   `-- 37353beaf2793d612857b56c29e2c6bfc6f3bb
|   |   |-- bf
|   |   |   `-- 8bf5fb01b57c3c6914e97292b05eadeb0b78a6
|   |   |-- c0
|   |   |   `-- 75bf98b67f24573980200a3389426360f42eed
|   |   |-- c4
|   |   |   `-- 49315d9c35a5d2431f95a1d2d4e4831a3a00af
|   |   |-- cd
|   |   |   `-- fc3fe15c3684ed37efdd455b8de454e72d0ea0
|   |   |-- d5
|   |   |   `-- e6c53f1c5365bb3647bf2c492687effb1a4034
|   |   |-- de
|   |   |   `-- 743adcae8dd63e093efe46f514c7536e24752a
|   |   |-- ee
|   |   |   `-- d014ac3bfe7e79af47e2e71dbbb5348f55c8a3
|   |   |-- fb
|   |   |   `-- 9af43c306f53f296e24ec6309badfcf4e1345c
|   |   |-- info
|   |   `-- pack
|   `-- refs
|       |-- heads
|       |   `-- master
|       `-- tags
|-- .gitignore
|-- deps.edn
|-- index.html
|-- my-cljs-project.org
|-- out
|   |-- cljs
|   |   |-- core.cljs
|   |   |-- core.js
|   |   |-- core.js.map
|   |   |-- pprint.cljs
|   |   |-- pprint.cljs.cache.json
|   |   |-- pprint.js
|   |   |-- pprint.js.map
|   |   |-- repl.cljs
|   |   |-- repl.cljs.cache.json
|   |   |-- repl.js
|   |   |-- repl.js.map
|   |   `-- spec
|   |       |-- alpha.cljs
|   |       |-- alpha.cljs.cache.json
|   |       |-- alpha.js
|   |       |-- alpha.js.map
|   |       `-- gen
|   |           |-- alpha.cljs
|   |           |-- alpha.cljs.cache.json
|   |           |-- alpha.js
|   |           `-- alpha.js.map
|   |-- cljs_deps.js
|   |-- cljsc_opts.edn
|   |-- clojure
|   |   |-- browser
|   |   |   |-- event.cljs
|   |   |   |-- event.cljs.cache.json
|   |   |   |-- event.js
|   |   |   |-- event.js.map
|   |   |   |-- net.cljs
|   |   |   |-- net.cljs.cache.json
|   |   |   |-- net.js
|   |   |   |-- net.js.map
|   |   |   |-- repl
|   |   |   |   |-- preload.cljs
|   |   |   |   |-- preload.cljs.cache.json
|   |   |   |   |-- preload.js
|   |   |   |   `-- preload.js.map
|   |   |   |-- repl.cljs
|   |   |   |-- repl.cljs.cache.json
|   |   |   |-- repl.js
|   |   |   `-- repl.js.map
|   |   |-- string.cljs
|   |   |-- string.cljs.cache.json
|   |   |-- string.js
|   |   |-- string.js.map
|   |   |-- walk.cljs
|   |   |-- walk.cljs.cache.json
|   |   |-- walk.js
|   |   `-- walk.js.map
|   |-- goog
|   |   |-- array
|   |   |   `-- array.js
|   |   |-- asserts
|   |   |   `-- asserts.js
|   |   |-- async
|   |   |   |-- delay.js
|   |   |   |-- freelist.js
|   |   |   |-- nexttick.js
|   |   |   |-- run.js
|   |   |   `-- workqueue.js
|   |   |-- base.js
|   |   |-- debug
|   |   |   |-- debug.js
|   |   |   |-- entrypointregistry.js
|   |   |   |-- error.js
|   |   |   |-- errorcontext.js
|   |   |   |-- logbuffer.js
|   |   |   |-- logger.js
|   |   |   `-- logrecord.js
|   |   |-- deps.js
|   |   |-- disposable
|   |   |   |-- disposable.js
|   |   |   `-- idisposable.js
|   |   |-- dom
|   |   |   |-- asserts.js
|   |   |   |-- browserfeature.js
|   |   |   |-- dom.js
|   |   |   |-- htmlelement.js
|   |   |   |-- nodetype.js
|   |   |   |-- safe.js
|   |   |   |-- tagname.js
|   |   |   `-- tags.js
|   |   |-- events
|   |   |   |-- browserevent.js
|   |   |   |-- browserfeature.js
|   |   |   |-- event.js
|   |   |   |-- eventhandler.js
|   |   |   |-- eventid.js
|   |   |   |-- events.js
|   |   |   |-- eventtarget.js
|   |   |   |-- eventtype.js
|   |   |   |-- listenable.js
|   |   |   |-- listener.js
|   |   |   `-- listenermap.js
|   |   |-- fs
|   |   |   `-- url.js
|   |   |-- functions
|   |   |   `-- functions.js
|   |   |-- html
|   |   |   |-- legacyconversions.js
|   |   |   |-- safehtml.js
|   |   |   |-- safescript.js
|   |   |   |-- safestyle.js
|   |   |   |-- safestylesheet.js
|   |   |   |-- safeurl.js
|   |   |   |-- trustedresourceurl.js
|   |   |   |-- trustedtypes.js
|   |   |   `-- uncheckedconversions.js
|   |   |-- i18n
|   |   |   `-- bidi.js
|   |   |-- iter
|   |   |   `-- iter.js
|   |   |-- json
|   |   |   |-- hybrid.js
|   |   |   `-- json.js
|   |   |-- labs
|   |   |   `-- useragent
|   |   |       |-- browser.js
|   |   |       |-- engine.js
|   |   |       |-- platform.js
|   |   |       `-- util.js
|   |   |-- log
|   |   |   `-- log.js
|   |   |-- math
|   |   |   |-- coordinate.js
|   |   |   |-- integer.js
|   |   |   |-- long.js
|   |   |   |-- math.js
|   |   |   `-- size.js
|   |   |-- messaging
|   |   |   |-- abstractchannel.js
|   |   |   `-- messagechannel.js
|   |   |-- mochikit
|   |   |   `-- async
|   |   |       `-- deferred.js
|   |   |-- net
|   |   |   |-- errorcode.js
|   |   |   |-- eventtype.js
|   |   |   |-- httpstatus.js
|   |   |   |-- websocket.js
|   |   |   |-- wrapperxmlhttpfactory.js
|   |   |   |-- xhrio.js
|   |   |   |-- xhrlike.js
|   |   |   |-- xmlhttp.js
|   |   |   |-- xmlhttpfactory.js
|   |   |   `-- xpc
|   |   |       |-- crosspagechannel.js
|   |   |       |-- crosspagechannelrole.js
|   |   |       |-- directtransport.js
|   |   |       |-- nativemessagingtransport.js
|   |   |       |-- transport.js
|   |   |       `-- xpc.js
|   |   |-- object
|   |   |   `-- object.js
|   |   |-- promise
|   |   |   |-- promise.js
|   |   |   |-- resolver.js
|   |   |   `-- thenable.js
|   |   |-- reflect
|   |   |   `-- reflect.js
|   |   |-- string
|   |   |   |-- const.js
|   |   |   |-- internal.js
|   |   |   |-- string.js
|   |   |   |-- stringbuffer.js
|   |   |   |-- stringformat.js
|   |   |   `-- typedstring.js
|   |   |-- structs
|   |   |   |-- map.js
|   |   |   `-- structs.js
|   |   |-- timer
|   |   |   `-- timer.js
|   |   |-- uri
|   |   |   |-- uri.js
|   |   |   `-- utils.js
|   |   `-- useragent
|   |       |-- product.js
|   |       `-- useragent.js
|   |-- main.js
|   |-- my_cljs_project
|   |   |-- core.cljs
|   |   |-- core.cljs.cache.json
|   |   |-- core.js
|   |   `-- core.js.map
|   `-- process
|       |-- env.cljs
|       |-- env.cljs.cache.json
|       |-- env.js
|       `-- env.js.map
`-- src
    `-- my_cljs_project
        `-- core.cljs

83 directories, 211 files
#+end_example

#+begin_src eshell
tree -a ../..
#+end_src

* todo
** DONE add line for open console
CLOSED: [2024-08-14 Wed 09:18]
to projet root
** eshell package for send rigeon to eshell
** auto save bookmarks
** DONE geting error
CLOSED: [2024-08-18 Sun 11:11]
~/Dev/ClojureScript/tutorials/my-cljs-project $  clj -m cljs.main --compile my-cljs-project.core --repl
Please install rlwrap for command editing or use "clojure" instead.

* 2024-08-10
** Necroteuch.org : 
#+begin_src emacs-lisp  :results output silent tangle: no
(find-file-other-frame "~/Dropbox/orgs/capture/Necroteuch.org")
    #+end_src
