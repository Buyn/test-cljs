* Commands>
** execute-src-block:
(save-excursion (progn (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
(save-excursion (let () (org-babel-goto-named-src-block "auto-tangle-block") (org-babel-execute-src-block)))
and then name the block you want to execute automatically:

** find-file:
[[elisp:(org-babel-tangle)
]]
(find-file-other-frame "~/INI/hydra-cfg.el")
(load "~/INI/hydra-cfg.el")
(org-babel-tangle)
** auto-tangle-block:
#+NAME: auto-tangle-block
#+begin_src emacs-lisp :results output silent :tangle no
(setq org-src-preserve-indentation t)
(untabify (point-min) (point-max))
(save-buffer)
;; (universal-argument)
;; (universal-argument)
(org-babel-tangle)
(find-file-other-frame "reagent-test/src/learn_cljs/reagent_test.cljs")
;; (find-file-other-frame "~/INI/hydra-cfg.el")
;; (load "~/INI/hydra-cfg.el")
;; (load "~/ELs/BuYn/reader.el")
 #+end_src

 
#+begin_src emacs-lisp :results output silent :tangle no
(save-buffer)
(org-babel-tangle)
(load "~/INI/hydra-cfg.el")
(load "~/ELs/BuYn/reader.el")
 #+end_src

from
#+HEADER: :tangle ~/INI/hydra-cfg.el

#+PROPERTY:    tangle ~/INI/hydra-cfg.el

:header-args: :tangle  "~/INI/hydra-cfg.el"
* docs all in brain
** all in brain
[[file:~/Dropbox/orgs/org-Brain/ClojureScript Idioms.org]]
[[file:~/Dropbox/orgs/org-Brain/ClojureScript Idioms.org::*link to turials][link to turials]]

** link to turials
*** stoped
(eww-of "https://www.learn-clojurescript.com/")

 * Capstone 3 - Contact Book
(eww-of "https://www.learn-clojurescript.com/section-3/lesson-20-capstone-3-contact-book/")
*** content
(eww-of "https://www.learn-clojurescript.com/")
*** git
(eww-of "https://github.com/kendru/learn-cljs")
https://github.com/kendru/learn-cljs

https://github.com/kendru/learn-cljs.git

https://github.com/kendru/learn-cljs/blob/main/code/lesson-8/weather/resources/public/css/style.css


/home/buyn/Dev/ClojureScript/tutorials/learn-cljs
*** fers src and new gen
(eww-of "https://www.learn-clojurescript.com/section-1/lesson-5-bootstrapping-a-clojurescript-project/")
*** debt
**** сделать таки приложение
 * Capstone 2 - Temperature Converter
(eww-of "https://www.learn-clojurescript.com/section-2/lesson-15-capstone-temperature-converter/")
**** Fix: error in contact app
https://www.learn-clojurescript.com/section-3/lesson-20-capstone-3-contact-book/
[[*contacts][contacts]]
** docs links
https://clojuredocs.org/clojure.string/split#examples
https://cljs.info/cheatsheet/
** manuals
*** seting up
yay -Sy clojure rlwrap leiningen

yay -S clojure rlwrap leiningen



Optional dependencies for clojure
    leiningen: automate clojure projects
    rlwrap: friendly shell with readline support

*** info from new page
Welcome to the ClojureScript browser REPL.

This page hosts your REPL and application evaluation environment. Validate the connection by typing (js/alert "Hello CLJS!") in the REPL.

To provide your own custom page, place an index.html file in the REPL launch directory, starting with this template:

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
  </head>
  <body>
    <script src="out/main.js" type="text/javascript"></script>
  </body>
</html>
*** cheatsheet
(eww-of "https://cljs.info/cheatsheet/")

(eww-of "https://kanaka.github.io/clojurescript/web/synonym.html")
https://cljs.info/cheatsheet/

https://kanaka.github.io/clojurescript/web/synonym.html

*** new project
призапуске из корневека путь это что внутренее оно определе путь в сорс проекта к корне будет создан проетс коненым имене. короче запускай из крнят- небзди и не умнячайй,всё будет рокенрол. В описании сказно что про неймспейс а не путь папок
clj -X:new :template figwheel-main :name learn-cljs/weather :args '["+deps" "--reagent"]'
**** explane
Since this command includes some unfamiliar syntax, let’s take a
moment to dissect it. As we just learned, the first part of the
command, clj -X:new, invokes the clj-new/create function, and
the remainder of the arguments are passed to this function. We use
Clojure keyword syntax to pass :template, :name, and :args
options. :template unsurprisingly specifies the name of the
template to use, :name is the name of the project to create, and :
args are additional arguments that the figwheel-main template
will interpret. Since figwheel-main is not a built-in template, clj-new
will fetch the template from Clojure’s central repository, Clojars.

We need to understand a bit of convention in order to make sense
of the structure of the generated project. Most Clojure and
ClojureScript projects use a namespace-qualified package name to
reduce the likelihood of naming conflicts between projects that are
pushed to a central registry. The namespace is the portion before
the forward slash and is commonly the GitHub username of the
developer or the reverse domain name of the organization that
owns the code, although it can be anything you like. For this book,
we will use learn-cljs as the namespace for all of our projects.1

Project Namespace and Name 

Project Namespace and Name

The final argument is a bit odd-looking: :args '["+deps"
"--reagent"]'. This passes a vector of strings as arguments to the
figwheel-main template. The exact arguments supported vary from
template to template, but Figwheel uses these to configure
optional extensions to the base template. In our case, we are
specifying that we want to use a deps.edn file to manage
dependencies, and we want to include the Reagent web framework.
*** help from fresh figwheel-main project
Generating fresh figwheel-main project.
  To get started:
  -->  Change into the 'weather' directory
  -->  Start build with 'clojure -M:fig:build'
*** figwheel readme.md alert
To get an interactive development environment run:

    clojure -A:fig:build

This will auto compile and send all changes to the browser without the
need to reload. After the compilation process is complete, you will
get a Browser Connected REPL. An easy way to try it is:

    (js/alert "Am I connected?")

and you should see an alert in the browser window.

To clean all compiled files:

    rm -rf target/public

To create a production build run:

  rm -rf target/public
  clojure -A:fig:min
*** --serve flag
You can test that this file still works by running the built in simple
web server via the --serve flag:

clj -M -m cljs.main --serve

*** repl help
In the cljs.user ns, controls can be called without ns ie. (conns) instead of (figwheel.repl/conns)
    Docs: (doc function-name-here)
    Exit: :cljs/quit
 Results: Stored in vars *1, *2, *3, *e holds last exception object
[Rebel readline] Type :repl/help for online help info
*** able to open files in your editor
 ;; To be able to open files in your editor from the heads up display
 ;; you will need to put a script on your path. This script will have
 ;; to take a file path and a line number ie.
 ;; in ~/bin/myfile-opener:
 ;;
 ;; #! /bin/sh
 ;; emacsclient -n +$2:$3 $1
 ;;
 ;; :open-file-command "myfile-opener"
 
 ;; if you are using emacsclient you can just use
 ;; :open-file-command "emacsclient"

 ;; Logging output gets printed to the REPL, if you want to redirect it to a file:
 ;; :log-file "figwheel-main.log"
*** creat project structure
mkdir hello_seymore
cd hello_seymore
touch project.clj
touch index.html
mkdir -p src/hello_seymore
touch src/hello_seymore/core.cljs

** clojure
*** ns
**** exampls
(ns learn-cljs.import-fns
    (:require learn-cljs.import-fns.ui                     ;; <1>
              [learn-cljs.import-fns.format                ;; <2>
               :refer [pluralize]]
              [learn-cljs.import-fns.inventory             ;; <3>
               :as inventory]
              [goog.dom :refer [getElement]                ;; <4>
                        :rename {getElement get-element}]))

1 Require the entire learn-cljs.import-fns.ui namespace
2 Require a single function from the
 learn-cljs.import-fns.format namespace
3 Require the learn-cljs.import-fns.inventory namespace with
 the alias inventory
4 Require a single function from the Google Closure Library
 namespace, renaming that function
**** Form 2: Refer

In the second case, we follow the namespace by :refer
[pluralize]. :refer will make every var that is listed in the vector
that follows available without any prefix. Thus, we can write
(pluralize item) instead of
(learn-cljs.import-fns.format/pluralize item). Any function
in the learn-cljs.import-fns.format namespace can still be
called using the fully-qualified syntax.
**** Form 3: Aliased Namespace

In the third case, we alias the namespace that we require using :as.
This works similar to the first case in that we are able to refer to any
public var in the namespace. However, we can use the symbol that
we specified after :as instead of the full namespace. Thus,
learn-cljs.import-fns.inventory/make-inventory becomes
inventory/make-inventory. The use of :as can be very useful when
requiring from namespaces with very verbose names. In general, we
should also prefer :as to :refer, since it makes it clear where a var
that we reference comes from without needing to look back at the
namespace declaration.
**** Form 4: Aliased Vars

Finally, in the fourth case, we rename a specific var that we referred.
Here, we alias the getElement function from the Google Closure
Library’s goog.dom module in order to give it a more idiomatic
kebab-case name. In practice, renaming is used more often to
prevent a name collision. For example, we may want to import
functions called mark-inactive from both my-app.users and
my-app.customers namespaces. We can use :rename to import them
as mark-user-inactive and mark-customer-inactive.
**** table
  Require Form  Description  Function Usage    
  my.namespace  require entire  my.namespace/compute    
    namespace      
  my.namespace  require specific  compute    
  :refer [compute  functions and refer to      
  other-fn]  them unqualified      
  my.namespace :as  require namespace  mine/compute    
  mine  with alias      
  my.namespace  require namespace  calculate    
  :refer [compute]  with specific vars      
  :rename {compute  aliased      
  calculate}        
**** Importing Google Closure Library Classes
(ns my-ns
  (:import [goog.math Coordinate Rect]))

(.contains (Rect. 10 50 5 5)
           (Coordinate. 12 50))

The thing to remember about :import is that it is only used for
requiring classes (including enums) from Google Closure modules -
never for including a ClojureScript namespace or a
(non-constructor) function from a Google Closure module.
**** Requiring Macros
(:require-macros [macro-ns :as macros])
**** private function
(defn- add-quantity [inventory-item qty]                   ;; <3>
  (update-in inventory-item [:qty]
    (fn [current-qty] (+ current-qty qty))))

3 Use defn- to declare a private function
**** Namespaces and the REPL
***** :reload
dev:cljs.user=> (require '[learn-cljs.import-fns.format :as fmt] :reload)
nil
dev:cljs.user=> (fmt/pluralize "burrito")
"burritos"
***** in-ns
dev:cljs.user=> (in-ns 'import-fns.format)

dev:import-fns.format=> (replace-suffix "programmer" "er" "ing")
"programming"

*** cond
**** condp
(condp
  =                                                        ;; <1>
  answer                                                   ;; <2>
  "restart" (prompt game :start)                           ;; <3>
  "help" (show-help game current)
  "save" (save-state current)
  "easter-egg" (rickroll)
  (next-state game current answer))                        ;; <4>
[[https://www.learn-clojurescript.com/section-2/lesson-10-making-choices/][Making Choices | Lesson 10 | Learn ClojureScript]]
**** if
(if test-expr then-expr else-expr)

(def account-status
  (if (< (:balance account) low-balance-threshold)         ;; <1>
    :low-balance                                           ;; <2>
    :ok))                                                  ;; <3>
**** if-let
(defn make-contact [contact]
  (let [clean-contact (select-keys contact [:first-name :last-name :email])]
    (if-let [address (:address contact)]
      (assoc clean-contact :address (make-address address))
      clean-contact)))
**** when
(defn conversion-rate [sessions]                           ;; <1>
  (let [users (user-count sessions)
        purchases (purchase-count sessions)]
    (when (> users 0)                                      ;; <2>
      (/ purchases users))))

1 Define a function that gets the ratio of purchases to users
2 Use when to prevent division by zero

(when (< 499 (:status response))
  (show-error-notification (:body response)))
**** case

(defn flip [d a]
  (sort (case d
              \R <
              \L >)
        a))
*** pred
**** < 
(< (:balance account) low-balance-threshold)
**** some
;; Does the player have the potion of wisdom in their inventory?
(some #(= (:name %) "Potion of Wisdom")
      (get-inventory player))
**** even?
(if (even? 10) "Even" "Odd")
;; "Even"                                                  ;; <2>
**** every?
(fn [xs test-elems]                                        ;; <1>
  (println "Checking whether" xs                           ;; <2>
           "contains each of" test-elems)
  (let [xs-set (into #{} xs)]                              ;; <3>
    (every? xs-set test-elems)))
**** empty?
(defn add-all [xs]
  (loop [sum 0                                             ;; <1>
         nums xs]
    (if (empty? nums)                                      ;; <2>
      sum
      (recur (+ sum (first nums))
             (rest nums)))))                               ;; <3>

             
(when (not (empty? value)) value)))
**** contains?

cljs.user=> (contains? badges :night-owl)                  ;; <2>
*** loop
**** for
***** tut
In its most basic form, for takes any number of sequences and a
body, and it yields a new sequence by evaluating the body for every
combination of sequence elements:

(for [elem1 sequence1                                      ;; <1>
      elem2 sequence2]                                     ;; <2>
  expr)                                                    ;; <3>

  
(for [n (range 10)]                                        ;; <1>
  (* n n))                                                 ;; <2>

(require [clojure.math :as math])
(require '[clojure.math :as math])
(require '[clojure.math :as Math])
(let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])]       ;; <1>
  (for [sides sides-list]                                  ;; <2>
    (Math/sqrt (+ (Math/pow (first sides) 2)               ;; <3>
                  (Math/pow (second sides) 2)))))
                                                           ;; <4>
;; (7.323933369440222 5.656854249492381 5 6.264982043070834)
***** forms
(for [n (range 100)                                        ;; <1>
      :let [square (* n n)]                                ;; <2>
      :when (even? n)                                      ;; <3>
      :while (< n 20)]                                     ;; <4>
  (str "n is " n " and its square is " square))            ;; <5>

;; ("n is 0 and its square is 0"
;; "n is 2 and its square is 4"
;; "n is 4 and its square is 16"
;; ...
;; "n is 18 and its square is 324")

***** exp
#+begin_src clojure
(for [n (range 10)]                                        ;; <1>
  (* n n))                                                 ;; <2>
#+end_src

#+RESULTS:
: Please reevaluate when nREPL is connected

#+begin_src clojure
(let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])
      hypo-list (for [sides sides-list]                           
                  (Math/sqrt (+ (Math/pow (first sides) 2)        
                                (Math/pow (second sides) 2))))]
      hypo-list)
#+end_src

#+begin_src clojure
(let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])
      hypo-list (for [sides sides-list]                           
                  (Math/sqrt (+ (Math/pow (first sides) 2)        
                                (Math/pow (second sides) 2))))]
  (for [sides sides-list
        c hypo-list]
    (let [a (get sides 0)
          b (get sides 1)]
      [a b c]
      ;; [a b]
      )))
#+end_src

#+RESULTS:
| 4.2 | 6 | 7.323933369440222 |
| 4.2 | 6 | 5.656854249492381 |
| 4.2 | 6 |               5.0 |
| 4.2 | 6 | 6.264982043070834 |
|   4 | 4 | 7.323933369440222 |
|   4 | 4 | 5.656854249492381 |
|   4 | 4 |               5.0 |
|   4 | 4 | 6.264982043070834 |
|   3 | 4 | 7.323933369440222 |
|   3 | 4 | 5.656854249492381 |
|   3 | 4 |               5.0 |
|   3 | 4 | 6.264982043070834 |
| 5.5 | 3 | 7.323933369440222 |
| 5.5 | 3 | 5.656854249492381 |
| 5.5 | 3 |               5.0 |
| 5.5 | 3 | 6.264982043070834 |


#+begin_src clojure
(let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])
      hypo-list (for [sides sides-list]                           
                  (Math/sqrt (+ (Math/pow (first sides) 2)        
                                (Math/pow (second sides) 2))))]
  (for [sides sides-list
        c     hypo-list
        :let [a (get sides 0)
              b (get sides 1)]]
      [a b c]))
#+end_src

#+RESULTS:
| 4.2 | 6 | 7.323933369440222 |
| 4.2 | 6 | 5.656854249492381 |
| 4.2 | 6 |               5.0 |
| 4.2 | 6 | 6.264982043070834 |
|   4 | 4 | 7.323933369440222 |
|   4 | 4 | 5.656854249492381 |
|   4 | 4 |               5.0 |
|   4 | 4 | 6.264982043070834 |
|   3 | 4 | 7.323933369440222 |
|   3 | 4 | 5.656854249492381 |
|   3 | 4 |               5.0 |
|   3 | 4 | 6.264982043070834 |
| 5.5 | 3 | 7.323933369440222 |
| 5.5 | 3 | 5.656854249492381 |
| 5.5 | 3 |               5.0 |
| 5.5 | 3 | 6.264982043070834 |

#+begin_src clojure
(let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])]
  (for [sides sides-list
        :let [a (first sides)
              b (second sides)
              c (Math/sqrt (+ (Math/pow a 2) (Math/pow b 2)))]]                           
    [a b c]))
#+end_src

#+RESULTS:
| 4.2 | 6 | 7.323933369440222 |
|   4 | 4 | 5.656854249492381 |
|   3 | 4 |               5.0 |
| 5.5 | 3 | 6.264982043070834 |
**** loop recur
***** gcd
(defn gcd [x y]                                            ;; <1>
  (if (= y 0)
    x
    (gcd y (mod x y))))                                    ;; <2>
;; #'cljs.user/gcd
(gcd 90 60)                                                ;; <3>
;; 30



(defn gcd-loop [a b]
  (loop [x a                                               ;; <1>
         y b]
    (if (= y 0)
      x                                                    ;; <2>
      (recur y (mod x y)))))                               ;; <3>
;; #'cljs.user/gcd-loop
(gcd-loop 90 60)
;; 30
***** loop Dissected
(loop [name-1 init-value-1                                 ;; <1>
       name-2 init-value-2]
  body-exprs                                               ;; <2>
  (recur next-value-1 next-value-2))                       ;; <3>


1 Pass in any number of bindings along with their value for the first
 pass of the loop
2 Any number of body expressions
3 Optionally recur to the beginning of the loop, supplying the values
 for each binding during the next iteration

***** for
(loop [i 0
      numbers []]
 (if (= i 10)
   numbers
   (recur (inc i) (conj numbers i))))                      ;; <1>
;; [0 1 2 3 4 5 6 7 8 9]
**** dorun
(do (dorun                                                 ;; <1>
      (for [i (range 100)]
        (println i)))
    (println "Done"))
;; 0                                                       ;; <2>
;; 1
;; ...
;; 99
;; Done
;; nil

Forcing Evaluation of a Lazy Sequence

1 Wrap the for in dorun
2 All numbers are printed as expected
**** doseq
(defn send-to-api [user]                                   ;; <1>
  (println "Sending to API:" user))
;; #'cljs.user/send-to-api
(let [users [{:name "Alice"}
             {:name "Bob"}
             {:name "Carlos"}]]
  (doseq [user users]                                      ;; <2>
    (send-to-api user))
  (println "Done!"))
;; Sending to API: {:name Alice}                           ;; <3>
;; Sending to API: {:name Bob}
;; Sending to API: {:name Carlos}
;; Done!
;; nil

1 Stub the send-to-api function
2 Iterate through the users collection
3 Side effects are performed immediately
**** do
(do
    (gevents/listen (gdom/getElement "app") "click"
      (fn [e]
        (condp = (aget e "target" "id")
          "up"   (swap! app-state inc)
          "down" (swap! app-state dec))))

    (add-watch app-state :counter-observer                 ;; <3>
      (fn [key atom old-val new-val]
        (render new-val)))

    (render @app-state)

    true)
*** vars
**** def
(def my-name "Fred")                                       ;; <1>
;; #'cljs.user/my-name

my-name
;; "Fred"

(def ten 10)
;; #'cljs.user/ten

(def twenty (* ten 2))                                     ;; <4>
;; #'cljs.user/twenty

twenty
;; 20

ten                                                        ;; <5>
;; 10


(def x 7)                                                  ;; <1>
;; #'cljs.user/x

x                                                          ;; <2>
;; 7

'x                                                         ;; <3>
;; x

(defn doubler [x] (* 2 x))                                 ;; <4>
;; #'cljs.user/doubler

(doubler 3)
;; 6

y                                                          ;; <5>
;; WARNING: Use of undeclared Var cljs.user/y at line 1 <cljs repl>
;; nil
**** defn
(defn mk-global [value]
  (def i-am-global value))
;; #'cljs.user/mk-global

mk-global                                                  ;; <2>
;; #object[ ... ]

(mk-global [4 8 15 16 23 42])
;; #'cljs.user/i-am-global

i-am-global                                                ;; <3>
;; [4 8 15 16 23 42]
**** list
***** create
cljs.user=> (list 4 8 15 16 23 42)                         ;; <1>
(4 8 15 16 23 42)

cljs.user=> '(4 8 15 16 23 42)                             ;; <2>
(4 8 15 16 23 42)

cljs.user=> (conj '(:west :north :north) :south)           ;; <3>
(:south :west :north :north)

cljs.user=> (first '("Tom" "Dick" "Harry"))                ;; <4>
"Tom"

cljs.user=> (rest '("Tom" "Dick" "Harry"))
("Dick" "Harry")
**** vectors
***** get
(let [desserts ["Apple Pie" "Ice Cream Sandwiches" "Chocolates" "Berry Buckle"]
      favorite-index 1
      favorite-dessert (get desserts favorite-index)]
  (println "All desserts are great, but I like" favorite-dessert "the best"))
***** first second
(let [sides-list (list [4.2 6] [4 4] [3 4] [5.5 3])]
  (for [sides sides-list
        :let [a (first sides)
              b (second sides)
              c (Math/sqrt (+ (Math/pow a 2) (Math/pow b 2)))]]                           
    [a b c]))
***** conj
****** 1
(loop [i 0
      numbers []]
 (if (= i 10)
   numbers
   (recur (inc i) (conj numbers i))))                      ;; <1>
****** 2
cljs.user=> (conj ["Moe" "Larry"] "Curly")                 ;; <1>
["Moe" "Larry" "Curly"]

cljs.user=> (first ["Athos" "Porthos" "Aramis"])
"Athos"
***** rest->list
cljs.user=> (rest ["Athos" "Porthos" "Aramis"])            ;; <2>
("Porthos" "Aramis")
***** add remove
(assoc test2 0 "test")
(merge test2 1 2 3)
***** slice
****** subvec
  (vec                                                     ;; <1>
    (concat                                                ;; <2>
      (subvec contact-list 0 idx)                          ;; <3>
      (subvec contact-list (inc idx)))))
***** concat
  (vec                                                     ;; <1>
    (concat                                                ;; <2>
      (subvec contact-list 0 idx)                          ;; <3>
      (subvec contact-list (inc idx)))))
***** nth
cljs.user=> (nth ["Athos" "Porthos" "Aramis"] 1)           ;; <3>
"Porthos"
***** ([
cljs.user=> (["Athos" "Porthos" "Aramis"] 1)               ;; <4>
"Porthos"
***** cost
  (vec                                                     ;; <1>
    (concat                                                ;; <2>
      (subvec contact-list 0 idx)                          ;; <3>
      (subvec contact-list (inc idx)))))
**** ClojureScript Data Literals
***** tab
|-----------+------------------------------------------------+----------------------------------------|
| Data Type | Description                                    | Example                                |
|-----------+------------------------------------------------+----------------------------------------|
| Number    | Integer or floating point numbers              | 17.4                                   |
| String    | Textual data                                   | "Today is the first day..."            |
| Character | Textual data                                   | \a                                     |
| Boolean   | Logical true/false                             | true                                   |
| Keyword   | Lightweight identifiers                        | :role                                  |
| Symbol    | Identifiers that are extensively used internal | 'cljs-is-awesome                       |
|           | to ClojureScript                               |                                        |
| List      | Ordered collection supporting efficient        | '(1 3 5 7 9)                           |
|           | traversal                                      |                                        |
| Vector    | Ordered collection supporting efficient access | [0 2 4 6 8]                            |
|           | by index                                       |                                        |
| Map       | Unordered collection associating unique keys   | {:name "Kayleigh", :age 29}            |
|           | to values                                      |                                        |
| Set       | Unordered collection of unique values          | #{true "ubiquity" 9.2}                 |
| nil       | The empty value                                | nil                                    |
| Object    | JavaScript object - used for interop           | #js {"isJs" true, "isImmutable" false} |
| Array     | JavaScript array - used for interop            | #js ["Lions" "Tigers" "Bears"]         |
|-----------+------------------------------------------------+----------------------------------------|
***** Numbers
****** q

32                                                         ;; <1>

012                                                        ;; <2>

0xbeef                                                     ;; <3>

0.6                                                        ;; <4>

1.719493e3                                                 ;; <5>

-0.12e-4                                                   ;; <6>

1 Decimal integer
2 Octal integer starts with a leading zero
3 Hexadecimal integer starts with leading 0x
4 Float
5 Float with an exponent
6 Float with a sign and exponent with a sign
****** inc  dec
    (add (inc x) (dec y))))
***** chars
\a                                                           ;; <2>
****** cast
******* number to char 
user> (doc char)
-------------------------
clojure.core/char
([x])
  Coerce to char
nil

***** Strings
****** q

"Quick! Brown foxes!"                                        ;; <1>

\a                                                           ;; <2>

"Column 1\tColumn 2"                                         ;; <3>

"foo
bar"                                                         ;; <4>

1 Simple string
2 Single character strings can be represented by the character
 proceeded by a backslash
3 String with special character
4 Strings can span multiple lines
****** str
    (str greeting ", " name)))                             ;; <3>
****** split
(def words (clojure.string/split
            "it was the best of times it was the worst of times"
            #" "))

****** join
  (->> contact                                             ;; <2>
       ((juxt :first-name :last-name))                     ;; <3>
       (str/join " ")))
****** string/replace
(defn disemvowel
  [string]
  (clojure.string/replace string #"(?i)[aeiou]" ""))
****** format
 (format "%d %d" (apply max xs) (apply min xs))))

***** Booleans
ClojureScript also uses JavaScript booleans. Since the only possible
options for a boolean are true or false, we will forego an extended
example.
***** Keywords
We now encounter a data type that does not have a JavaScript
equivalent. A keyword is represented by a name preceded by a
colon. Keywords evaluate to themselves, and two keywords with the
same name are considered equal. One interesting property of
keywords is that they can be used as a function. When used as a
function, the keyword expects a map as an argument and it will
return the value in the map for which it is the key. When a keyword
begins with two colons, the current namespace will be prepended to
the keyword.

Keywords

:a-keyword                                                  ;; <1>

::namespaced-keyword                                        ;; <2>

:explicit-ns/keyword                                        ;; <3>

{:name "Bill", :type "admin"}                               ;; <4>

(:type user)                                                ;; <5>

1 Simple keyword
2 With implicit namespace - shorthand for :
 cljs.user/namespaced-keyword
3 With explicit namespace
4 Used as keys in a map
5 Used as a function to perform a map lookup
***** Symbols

Symbols are an interesting data type because they are closely linked
to the Lisp family of programming languages from which
ClojureScript is derived. Symbols are names that usually evaluate to
some other object. We have seen symbols in almost every example
without even thinking about it.

my-function                                                 ;; <1>

first                                                       ;; <2>

1 Symbol referring to a user-defined variable
2 Symbol referring to a built-in function

Of ClojureScript’s data types, symbols are probably the most difficult
to comprehend. They have a very meta quality about them, and they
do not directly correspond to another familiar concept. When
ClojureScript code is evaluated, it will try to resolve a symbol to the
thing that it names. Sometimes, we want to refer to a symbol itself
rather than the thing that it names, in which case we can place a
single quote in front of the symbol to “quote” it, instructing the
ClojureScript reader to not evaluate it. Since they are not used very
commonly in application code, we will not revisit symbols to the
depth that we will with the other data types.
***** Lists

(+ 1 2 3 4)                                                 ;; <1>

'(+ 1 2 3 4)                                                ;; <2>

'(some data)                                                ;; <3>

'()                                                         ;; <4>

1 A list that is interpreted as an expression and evaluated
2 Prevent evaluation of a list by starting it with a single quote
3 Lists can contain any ClojureScript data type
4 An empty list
***** Vectors

Vectors are comprised of a number of expressions contained inside
square brackets. When ClojureScript encounters a vector, it will
interpret it as a data structure and will not try to evaluate it as a
function call. They are used in a similar manner to JavaScript arrays
and are the most common data structure in ClojureScript. Vectors
are also used to list the arguments that a function takes.

Vectors

[]                                                          ;; <1>

["Alice" "Bob" "Carol"]                                     ;; <2>

(defn say-hello [name]                                      ;; <3>
  (println "Hello," name))

1 An empty vector
2 A vector used to define a collection of strings
3 A vector used to declare a function’s argument list
***** Maps
{}                                                          ;; <1>

{"product" "Self-Sealing Stem Bolt"                         ;; <2>
 "sku" "DS9-SB09"
 "stock" 212}

{:name "Jorge", :age 29}                                    ;; <3>

1 An empty map
2 A map using strings as keys
3 A map using keywords as keys


 :transitions {"yes" :embarked,
               "no" :lost-game}
***** Sets

Sets are an unordered collection of unique elements. They are often
used when we want to avoid duplicates or need to quickly determine
whether an element is in a collection. Sets are declared with any
number of elements contained inside curly brackets that are prefixed
with a pound sign.

Sets

#{}                                                         ;; <1>

#{"admin" "editor" "author" "subscriber"}                   ;; <2>

1 An empty set
2 A set with several unique strings
***** Nil
Nil is the empty value and is always written as nil. It is the
equivalent of null in JavaScript and acts the same as false when
used as a boolean.
**** convert
***** str->int
(defn str->int [s] (Integer/parseInt s))
***** Integer.
(map #(Integer. %) (str/split game #":"))
**** maps
***** stract
{:type :start
 :title "Starbase Lambda"
 :dialog (str "Welcome, bold adventurer! You are about to embark on a dangerous "
              "quest to find the Tetryon Singularity.\nAre you up to the task?")
 :transitions {"yes" :embarked,
               "no" :lost-game}}

(any data typs as keys)
exampl vectors as key                
cljs.user=> {[:b 3] :miss, [:a 7] :hit}
{[:b 3] :miss, [:a 7] :hit}
***** create
****** {}
cljs.user=> {:type "talk"                                  ;; <1>
             :title "Simple Made Easy"
             :author "Rick Hickey"}
{:type "talk", :title "Simple Made Easy", :author "Rick Hickey"}

****** hash-map
cljs.user=> (hash-map :foo "bar", :baz "quux")             ;; <2>
{:baz "quux", :foo "bar"}
***** change of add new
****** assoc

cljs.user=> (defn add-sales-tax [cart-item]                ;; <1>
              (let [{:keys [price]} cart-item]
                (assoc cart-item :sales-tax (* price tax-rate))))
#'cljs.user/add-sales-tax

cljs.user=> (add-sales-tax {:name "Medium T-Shirt"         ;; <2>
                            :price 10.00})
{:name "Medium T-Shirt", :price 10, :sales-tax 0.79}

cljs.user=> (assoc trail                                   ;; <2>
                   :difficulty :moderate
                   :location "Colorado"
                   :max-elevation 12800)
***** remove
****** by key dissoc
cljs.user=> (defn untrack [session]
              (dissoc session :ip :user-agent))
#'cljs.user/untrack

cljs.user=> (untrack my-session)
{:start 1464641029299, :is-active? true, :page-views []}
****** narow dow by select-keys
cljs.user=> (select-keys my-session [:start :is-active? :page-views])
{:start 1464641029299,
 :is-active? true,
 :page-views []}
***** merge
cljs.user=> (defn click [location target]
              (merge (event :click)
                     {:location location, :target target}))
***** get
  (let [scene (get game current)

cljs.user=> (def fido {:breed "Boxer" :color "brown" :hungry? true})
#'cljs.user/fido

cljs.user=> (get fido :breed)
"Boxer"
***** (:
cljs.user=> (:color fido)
"brown"
***** :?)
cljs.user=> (fido :hungry?)
true
***** get-in
  (get-in scene [:transitions "yes"])
***** conj<-[]
cljs.user=> (conj {:x 10 :y 12} [:z 7])
{:x 10, :y 12, :z 7}
***** first ->[]
cljs.user=> (first {:x 10, :y 12, :z 7})
[:x 10]
***** rest->([]...)
cljs.user=> (rest {:x 10, :y 12, :z 7})
([:y 12] [:z 7])
***** repl
****** 01
#+begin_src clojure

(def cart [{:name "Silicone Pancake Mold" :price 10.49}
                       {:name "Small Pour-Over Coffee Maker" :price 18.96}
                       {:name "Digital Kitchen Scale" :price 24.95}])

(def tax-rate 0.079)
(defn add-sales-tax [cart-item]                ;; <1>
              (let [{:keys [price]} cart-item]
                (assoc cart-item :sales-tax (* price tax-rate))))

(add-sales-tax {:name "Medium T-Shirt"         ;; <2>
                            :price 10.00})


(map add-sales-tax cart)                       ;; <3>

#+end_src

#+RESULTS:
| #'user/cart                                                                                                                                                                                                               |
| #'user/tax-rate                                                                                                                                                                                                           |
| #'user/add-sales-tax                                                                                                                                                                                                      |
| {:name "Medium T-Shirt", :price 10.0, :sales-tax 0.79}                                                                                                                                                                    |
| ({:name "Silicone Pancake Mold", :price 10.49, :sales-tax 0.8287100000000001} {:name "Small Pour-Over Coffee Maker", :price 18.96, :sales-tax 1.49784} {:name "Digital Kitchen Scale", :price 24.95, :sales-tax 1.97105}) |
****** 02

#+begin_src clojure
(map add-sales-tax cart)                       ;; <3>
#+end_src

#+RESULTS:
| :name | Silicone Pancake Mold        | :price | 10.49 | :sales-tax | 0.8287100000000001 |
| :name | Small Pour-Over Coffee Maker | :price | 18.96 | :sales-tax |            1.49784 |
| :name | Digital Kitchen Scale        | :price | 24.95 | :sales-tax |            1.97105 |

****** 03
******* 001
#+begin_src clojure
(map #(:name %) cart)                       ;; <3>
#+end_src

#+RESULTS:
| Silicone Pancake Mold | Small Pour-Over Coffee Maker | Digital Kitchen Scale |

******* 002
#+begin_src clojure
(map (fn [elm] (:name elm)) cart)                       ;; <3>
#+end_src

#+RESULTS:
| Silicone Pancake Mold | Small Pour-Over Coffee Maker | Digital Kitchen Scale |

******* 003
#+begin_src clojure
(map #(:name %1) cart)                       ;; <3>
#+end_src

#+RESULTS:
| Silicone Pancake Mold | Small Pour-Over Coffee Maker | Digital Kitchen Scale |

****** 04 discount
******* defn

#+begin_src clojure
(defn discount [products pct-discount]
  (map (fn [product] (assoc product :price (* pct-discount (:price product)))) products))
#+end_src

#+RESULTS:
: #'user/discount
******* use
#+begin_src clojure
(discount cart 1.2)
#+end_src

1.2
| :name | Silicone Pancake Mold        | :price |             12.588 |
| :name | Small Pour-Over Coffee Maker | :price |             22.752 |
| :name | Digital Kitchen Scale        | :price | 29.939999999999998 |

0.2
| :name | Silicone Pancake Mold        | :price | 2.0980000000000003 |
| :name | Small Pour-Over Coffee Maker | :price | 3.7920000000000003 |
| :name | Digital Kitchen Scale        | :price |               4.99 |

1
| :name | Silicone Pancake Mold        | :price | 10.49 |
| :name | Small Pour-Over Coffee Maker | :price | 18.96 |
| :name | Digital Kitchen Scale        | :price | 24.95 |

0.9
| :name | Silicone Pancake Mold        | :price |  9.441 |
| :name | Small Pour-Over Coffee Maker | :price | 17.064 |
| :name | Digital Kitchen Scale        | :price | 22.455 |
**** atoms
***** def
(def counter (atom 0))
***** get
****** deref
Since an atom provides a reference to some value at any point in
time, we can dereference it - that is, get the immutable value to which
it refers - by using the deref macro or its shorthand form, @.

counter                                                    ;; <1>
;; => #object[cljs.core.Atom {:val 0}]
(deref counter)                                            ;; <2>
;; => 0

@counter                                                   ;; <3>
;; => 0
***** set
****** swap!
******* counter
(swap! counter inc)

@counter
;; => 1

(swap! counter + 9)

@counter
;; => 10

(swap! counter (constantly 0))

******* creature and base-creature
(def creature
  (atom {:type "water"
         :life 50
         :abilities ["swimming" "speed"]}))

(def base-creature @creature)                              ;; <1>

(swap! creature update :abilities conj "night vision")

@creature                                                  ;; <2>
;; => {:type "water"
;;     :life 50
;;     :abilities ["swimming" "speed" "night vision"]}

base-creature                                              ;; <3>
;; => {:type "water"
;;     :life 50
;;     :abilities ["swimming", "speed"]}
****** reset!
(reset! counter 0)

@counter
;; => 0
***** set-validator!
(set-validator! creature
  (fn [c] (>= (:life c) 0)))

(swap! creature assoc :life 10) ;; Ok

(swap! creature assoc :life -1) ;; Throws error

(:life @creature) ;; 10
***** watch
****** add-watch

(defonce app-state (atom 0))                               ;; <1>

(def app-container (gdom/getElement "app"))

(defn render [state]                                       ;; <2>
  (set! (.-innerHTML app-container)
        (hiccups/html
          [:div
            [:p "Counter: " [:strong state]]
            [:button {:id "up"} "+"]
            [:button {:id "down"} "-"]])))

(defonce is-initialized?
  (do
    (gevents/listen (gdom/getElement "app") "click"
      (fn [e]
        (condp = (aget e "target" "id")
          "up"   (swap! app-state inc)
          "down" (swap! app-state dec))))

    (add-watch app-state :counter-observer                 ;; <3>
      (fn [key atom old-val new-val]
        (render new-val)))

    (render @app-state)

    true))
****** remove-watch
(remove-watch app-state :counter-observer)
***** patterns
****** Guideline #1: Pass atoms explicitly

In order to keep a function testable and easy to reason about, we
should always explicitly pass in any atom(s) on which it operates as
arguments rather than operating on a global atom from its scope:

;; Don't do this
(def state (atom {:counter 0}))                            ;; <1>
(defn increment-counter []
  (swap! state update :counter inc))

;; OK
(defn increment-counter [state]                            ;; <2>
  (swap! state update :counter inc))
****** Guideline #2: Prefer fewer atoms
In general, an application should have fewer atoms with more data
rather than a separate atom for every piece of state. It is simpler to
think about transitioning our entire app state one step at a time
rather than synchronizing separate pieces of state:

;; Don't do this
(def account-a (atom 100))                                 ;; <1>
(def account-b (atom 100))
(swap! account-a - 25)
(swap! account-b + 25)

;; OK
(def accounts (atom {:a 100                                ;; <2>
                     :b 100}))
(swap! accounts
  (fn [accounts]
    (-> accounts
        (update :a - 25)
        (update :b + 25))))

1 Represent each piece of state as a separate atom
2 Represent our “world” as an atom
**** actions
***** costing
****** into
(fn [xs test-elems]                                        ;; <1>
  (println "Checking whether" xs                           ;; <2>
           "contains each of" test-elems)
  (let [xs-set (into #{} xs)]                              ;; <3>
    (every? xs-set test-elems)))

    
cljs.user=> (def my-vec ["Lions" "Tigers" "Bears" "Lions"])
#'cljs.user/my-vec

cljs.user=> (defn loud [word]
              (str word "!"))
#'cljs.user/loud

cljs.user=> (map loud my-vec)                              ;; <1>
("Lions!" "Tigers!" "Bears!" "Lions!")

cljs.user=> (into [] (map loud my-vec))                    ;; <2>
["Lions!" "Tigers!" "Bears!" "Lions!"]

cljs.user=> (into '() (map loud my-vec))                   ;; <3>
("Lions!" "Bears!" "Tigers!" "Lions!")
# 3 Putting the seq into a list reverses the elements

cljs.user=> (into #{} (map loud my-vec))                   ;; <4>
#{"Lions!" "Tigers!" "Bears!"}
***** filter
****** by defn
cljs.user=> (filter even? '(1 2 3 4 5))                    ;; <1>
(2 4)

cljs.user=> (defn longer-than-4? [s]                       ;; <2>
              (> (count s) 4))
#'cljs.user/longer-than-4?

cljs.user=> (filter longer-than-4?                         ;; <3>
                    ["Life" "Liberty" "Pursuit" "of" "Happiness"])
("Liberty" "Pursuit" "Happiness")
****** by key?

cljs.user=> (def cart [{:name "Silicone Pancake Mold" :price 10.49 :taxable? false}
                       {:name "Small Pour-Over Coffee Maker" :price 18.96 :taxable? true}
                       {:name "Digital Kitchen Scale" :price 24.95 :taxable? true}])

#'cljs.user/cart
cljs.user=> (filter :taxable? cart)
({:name "Small Pour-Over Coffee Maker", :price 18.96, :taxable? true}
 {:name "Digital Kitchen Scale", :price 24.95, :taxable? true})

--------------------------------------- 
(reduce +                                                  ;; <1>
        (map :price                                        ;; <2>
             (filter :taxable? cart)))                     ;; <3>
***** set
cljs.user=> (set! js/testScores (clj->js updated-scores))  ;; <4>
***** get
****** set default value
(get contact :address {})
***** nested
****** get-in
(get-in user [:sessions 0 :page-views 0])

(get
  (get
    (get
      (get user :sessions)                                 ;; <1>
     0)                                                    ;; <2>
   :page-views)                                            ;; <3>
  0)                                                       ;; <4>
****** assoc-in
(assoc-in user
          [:sessions 0 :page-views]                        ;; <1>
          [(page-view "www.learn-cljs.com" 123456 [])])    ;; <2>

(assoc-in {} [:foo :bar :baz] "quux")
=> {:foo {:bar {:baz "quux"}}}
****** update-in
cljs.user=> (update-in {:num 1} [:num] inc)
{:num 2}
***** sort
(defn flip [d a]
  (sort (case d \R < \L >) a))

(sort a) = <
***** loop
****** doseq
(def numbers [4, 8, 15, 16, 23, 42])

(doseq [n numbers]
  (println "The number is" n))
***** let
****** bind
(let [bindings]
  expr1
  expr2
  ...
  expr-n)
(defn parse-msg [msg-raw]
  (let [msg-types {:c ::control
                   :e ::event
                   :x ::error}
        msg (reader/read-string msg-raw)
        type (:t msg)
        data (:d msg)]
    (println "Got data:" data)
    [(get msg-types type) data]))

    
the names
that we declare first are available in later bindings. For example, we
defined msg as the result of evaluating the expression
****** vector bind
******* def
(let [[id name rank extra] [420 "Pepper" "Sgt."]]
  (println "Hello," rank name "- you have ID =" id "and extra =" extra))

;; Hello, Sgt. Pepper - you have ID = 420 and extra = nil
******* _
(let [[_ name rank] [420 "Pepper" "Sgt."]]
  (println "Hello," rank name))

;; Hello, Sgt. Pepper

******* &
(let [[eat-now & eat-later] ["nachos" "salad" "apples" "yogurt"]]
  (println "Please pass the" eat-now)
  (println "I'm saving these for later:" eat-later))

;; Please pass the nachos
;; I'm saving these for later: (salad apples yogurt)

******* 
****** map bind
******* def
(let [{x :x
       y :y} {:x 534 :y 497 :z -73}]
  (println "Inspecting coordinates:" x "," y))

;; Inspecting coordinates: 534 , 497
******* :strs instead of :keys
(let [{:keys [x y z]} {:x 534 :y 497 :z -73}]
  (println "x = " x "| y = " y "| z = " z))

;; x =  534 | y =  497 | z =  -73
******** exampl
cljs.user=> (defn add-sales-tax [cart-item]                ;; <1>
              (let [{:keys [price]} cart-item]
                (assoc cart-item :sales-tax (* price tax-rate))))
#'cljs.user/add-sales-tax

cljs.user=> (add-sales-tax {:name "Medium T-Shirt"         ;; <2>
                            :price 10.00})
{:name "Medium T-Shirt", :price 10, :sales-tax 0.79}
******* :keys :or
(let [{:keys [fname lname profession]
       :or {profession "professional"}} {:fname "Sasha" :lname "Simonova"}]
  (println fname lname "is a" profession))

;; Sasha Simonova is a professional
***** map
****** map
****** map-indexed
it calls the mapping function with the index of the element in
the sequence as well as the element itself
      (map-indexed (fn [idx contact]
                     (render-contact-list-item idx contact (= idx selected)))
                   contacts)]))
***** reduce
****** example
cljs.user=> (def cart                                      ;; <1>
              [{:name "Tachyon Emitter Array" :price 1099.45}
               {:name "Dilithium Matrix" :price 2442.00}
               {:name "Antimatter Chamber Sealant Rings (4)" :price 19.45}
               {:name "Toothbrushes (2-pack)" :price 8.50}])
#'cljs.user/cart

cljs.user=> (defn add-price [total item]                   ;; <2>
              (+ total (:price item)))
#'cljs.user/add-price

cljs.user=> (def total (reduce add-price 0 cart))          ;; <3>
#'cljs.user/total

cljs.user=> (.toFixed total 2)
"3569.40"
****** repl
#+begin_src clojure
(def events [{:event :click, :timestamp 1463889739}
             {:event :typing, :timestamp 1463889745}
             {:event :click, :timestamp 1463889746}
             {:event :click, :timestamp 1463889753}])
#+end_src

#+RESULTS:
: #'user/events

#+begin_src clojure
(defn longest-idle-time [events]
  (:max-idle                                               ;; <1>
    (reduce (fn [{:keys [max-idle last-ts]} event]         ;; <2>
              (let [ts (:timestamp event)
                    idle-time (- ts last-ts)]
                {:max-idle (max max-idle idle-time)        ;; <3>
                 :last-ts ts}))
            {:max-idle 0
             :last-ts (:timestamp (first events))}         ;; <4>
            events)))
#+end_src

#+RESULTS:
: #'user/longest-idle-time

#+begin_src clojure
(longest-idle-time events)
#+end_src

#+RESULTS:
: 7

#+begin_src clojure
(defn count-user-clicks [events]
  (reduce #(if (= :click (:event %2))
                 (inc %1)
                 %1)
          0 events))
#+end_src

#+begin_src clojure
(defn count-user-clicks [events]
  (reduce (fn [clicks-sum event]
            (if (= (:event event) :click )
                 (inc clicks-sum)
                 clicks-sum))
          0 events))

(count-user-clicks events)
#+end_src

#+begin_src clojure
(defn count-user-clicks [events]
  (reduce (fn [clicks-sum event]
            (or (= (:event event) :click )
                 (inc clicks-sum)
                 clicks-sum))
          0 events))

(count-user-clicks events)
#+end_src
#+RESULTS:
| #'user/count-user-clicks |
|                        3 |

#+begin_src clojure
(count-user-clicks events)
#+end_src

#+RESULTS:
: 3

#+begin_src clojure
(def duble-click-max-lag 1)
(defn count-user-duble-clicks [events]
  (reduce (fn [last-event new-event]
            (unless (:clicks-sum last-event)
                      (assoc last-event :clicks-sum 0))
            (when (= (:event new-event) :click )
              (when (last-event new-event)
              (assoc last-event :clicks-sum (inc clicks-sum))
                 clicks-sum))
                  )
          0 events))

(count-user-duble-clicks events)
#+end_src

#+begin_src clojure
;; (defn test [{clicks-sum :clicks-sum
(defn test [{un-clicks-sum :clicks-sum
             last-ts :timestamp}
            {new-event :event
             new-ts :timestamp}]
  ;; (println last-event)
  ;; (when-not (integer? clicks-sum) (def clicks-sum 0))
  ;; (let [clicks-sum 1]
  ;;  [clicks-sum last-ts new-event last-ts])
  ;; (def clicks-sum 1)
  (let [clicks-sum
        (if (and (= new-event :click )
                 (> duble-click-max-lag
                 (- new-ts last-ts)))
        (inc un-clicks-sum)
        0)]
        ;; 0]
          ;; (inc clicks-sum))))
  ;; [clicks-sum last-ts new-event last-ts]
  ;; (def clicks-sum (inc clicks-sum))
  ;; (inc clicks-sum)
  [clicks-sum (- new-ts last-ts)
   (> duble-click-max-lag (- new-ts last-ts))
    (and (= new-event :click )
                            (> duble-click-max-lag
                               (- new-ts last-ts)))])
  ;; (println clicks-sum)
  ;; (println last-ts)
  ;; (println "test ok")
  )

;; (test (first events) (second events))
;; (events 3)
(test (events 2) (events 3))
#+end_src

#+RESULTS:
| #'user/test                          |
| class java.lang.NullPointerException |

#+begin_src clojure
(test (first events) (second events))
#+end_src

#+RESULTS:
: 1463889745

#+begin_src clojure
(def duble-click-max-lag 1)
#+end_src

#+begin_src clojure
(defn count-user-duble-clicks [events]
  (:clicks-sum
   (reduce (fn [{;; last-event :event
                un-clicks-sum :clicks-sum
                last-ts :timestamp}
                {new-event :event
                new-ts :timestamp}]
            (let [clicks-sum (if (integer? un-clicks-sum) un-clicks-sum 0)]
              (when (= new-event :click )
                (when (> duble-click-max-lag
                        (- new-ts last-ts)
                      (inc clicks-sum))))
                {;; :event last-event
                :clicks-sum clicks-sum 
                :timestamp last-ts}))
          events)))

(count-user-duble-clicks events)
#+end_src

#+RESULTS:
| #'user/count-user-duble-clicks |
|                              0 |

#+begin_src clojure
(def duble-click-max-lag 10000000000000000)
(count-user-duble-clicks events)
#+end_src

#+begin_src clojure
(def duble-click-max-lag 10000000000000000)
(inc duble-click-max-lag)
duble-click-max-lag
#+end_src

#+RESULTS:
| #'user/duble-click-max-lag |
|                          0 |

#+begin_src clojure
(defn its-biger? [old new]
  (let [delta (- (:timestamp new) (:timestamp old))]
    (if (< (:bigest old) delta)
      {:bigest delta, :timestamp (:timestamp new)}
      {:bigest (:bigest old), :timestamp (:timestamp new)})
    ))

(reduce #() {:bigest 0, :timestamp (:timestamp (ferst events))} events)

#+end_src
***** update
(defn maybe-set-address [contact]                          ;; <1>
  (if (:address contact)
    (update contact :address make-address)
    contact))

(update state :contacts                            ;; <2>
        replace-contact idx contact)
(update state :contacts
        add-contact contact)))))
***** update-in
      (update-in [:tags] conj "immutability")
      (update-in [:rating] inc)
      (update-in [:title] #(str % " for fun and profit"))
***** transient
(transient {})
;; #object[cljs.core.TransientArrayMap]

The API for working with transients is similar to the standard
collection API, but the transformation functions all have a !
appended, e.g. assoc!, conj!. The read API, however, is identical to
that of immutable collections. A transient collection may be
converted back to its persistent counterpart using the persistent!
function:

(-> {}
    transient                                              ;; <1>
    (assoc! :speed 12.3)
    (assoc! :position [44, 29])
    persistent!)                                           ;; <2>
1 Convert map to a transient
2 Convert transient map back to a persistent (immutable) structure

*** Constract
**** #
(some #(= (:name %) "Potion of Wisdom")
      (get-inventory player))
**** on functin operatins
***** comp
****** q
1 comp creates a new function that composes others together
the -> macro applied in reverse
тоесть берёт функции и последовательно применяет кним аргумент
(= ((comp f g) x)
   (f (g x)))
****** x1
(defn user-status [user]
  [:div {:class "user-status"}
    ((juxt
      (comp bold nickname)                                 ;; <1>
      (partial with-status                                 ;; <2>
               [:span {:class "status-indicator"}]))
     user)])
***** partial
****** q
2 partial creates a function that already has some arguments
 supplied

(defn add [x y]                                            ;; <1>
  (+ x y))

(def add-5 (partial add 5))                                ;; <2>

(add-5 10)
;; 15

(def add-5
  (fn [y]
    (add 5 y)))
****** x1
(defn user-status [user]
  [:div {:class "user-status"}
    ((juxt
      (comp bold nickname)                                 ;; <1>
      (partial with-status                                 ;; <2>
               [:span {:class "status-indicator"}]))
     user)])
***** juxt
****** x01
(def minmax
  (juxt #(reduce Math/min %)
        #(reduce Math/max %)))

(minmax [48 393 12 14 -2 207])
;; [-2 393]
****** x02
  (->> contact                                             ;; <2>
       ((juxt :first-name :last-name))                     ;; <3>
       (str/join " ")))

((juxt :first-name :last-name )
  (contact-list 0))
 
["Phillip" "Jordan"]

((juxt :first-name :last-name) {:first-name "Bob" :last-name "Jones"})
;; ["Bob" "Jones"]
****** 3
**** range
***** take
(take 5 (range))                                           ;; <5>
;; (0 1 2 3 4)
***** map
(map inc (take 5 (range)))
;; (1 2 3 4 5)
***** doseq
(doseq [i (range 5)]
  (println "Looping!"))
;; Looping!
;; Looping!
;; Looping!
;; Looping!
;; Looping!
;; nil                                                     ;; <3>
**** lambda
***** fn
(def remove-by                                             ;; <1>
  (fn [pred]
    (fn [list]                                             ;; <2>
      (reduce (fn [acc elem]
                (if (pred elem) acc (conj acc elem)))
              []
              list))))

(def remove-reds                                           ;; <3>
  (remove-by (fn [product] (= "Red" (:color product)))))

(remove-reds
  [{:sku "99734N" :color "Blue"}
   {:sku "99294N" :color "Red"}
   {:sku "11420Z" :color "Green"}])
***** #( %1 %2)
#(let [xs-set (into #{} %1)]
   (every? xs-set %2)))
***** (# %)

(#(str "Hello " %) "world")
;; => "Hello world"
***** closure
(defn make-adder [x]
  (fn [y]
    (add x y)))

((make-adder 1) 5)  ;; 6
((make-adder 2) 5)  ;; 7
((make-adder 10) 5) ;; 15

**** defn
***** def fn
(def contains-every?                                       ;; <1>
  (fn [xs test-elems]
    ;; function body...
    ))

(defn contains-every? [xs test-elems]                      ;; <2>
  ;; function body...
)
***** (defn ([1] ()) ([2]())
****** q
(defn my-multi-arity-fn
 ([a] (println "Called with 1 argument" a))                ;; <1>
 (                                                         ;; <2>
  [a b]                                                    ;; <3>
  (println "Called with 2 arguments" a b)                  ;; <4>
 )
 ([a b c] (println "Called with 3 arguments" a b c)))

(defn my-single-arity-fn [a]                               ;; <5>
  (println "I can only be called with 1 argument"))
****** super call
(defn page-view
  ([url] (page-view url (.now js/Date) []))    ;; <1>
  ([url loaded] (page-view url loaded []))
  ([url loaded events]
    {:url url
      :loaded loaded
      :events events}))

***** Docstrings
(defn make-inventory
  "Creates a new inventory that initially contains no items.
  Example:
  (assert
    (== 0 (count (:items (make-inventory)))))"
  []
  {:items []})
***** (doc
dev:cljs.user=> (doc make-inventory)
-------------------------
cljs.user/make-inventory
([])
  Creates a new inventory that initially contains no items.
  Example:
  (assert
    (== 0 (count (:items (make-inventory)))))
nil
***** :pre :post
(defn fractional-rate [num denom]
  {:pre [(not= 0 denom)]                                   ;; <1>
   :post [(pos? %) (<= % 1)]}                              ;; <2>
  (/ num denom))

(fractional-rate 1 4)
;; 0.25

(fractional-rate 3 0)
;; Throws:
;; #object[Error Error: Assert failed: (not= 0 denom)]
***** recur

#+begin_src clojure
(defn factorial
 ([n] (factorial n 1 []))
 ([n result result-list]
  (if (<= n 1)
    result-list
    (recur (dec n) (* result n) (conj result-list (* result n))))))

(factorial 5)
#+end_src

#+RESULTS:
| #'user/factorial |
| [5 20 60 120]    |
***** bindin params
(fn [{:keys [max-idle last-ts]} event]         ;; <2>
              (let [ts (:timestamp event)
                    idle-time (- ts last-ts)]
                {:max-idle (max max-idle idle-time)        ;; <3>
                 :last-ts ts}))
**** Thread
***** Thread-First Transformation
(-> val                                                    ;; <1>
    (fn-1 :foo)                                            ;; <2>
    (fn-2 :bar :baz)                                       ;; <3>
    (fn-3))

(fn-3                                                      ;; <4>
  (fn-2
    (fn-1 val :foo)
    :bar :baz))
***** thread last
  (->> contact                                             ;; <2>
       ((juxt :first-name :last-name))                     ;; <3>
       (str/join " ")))
**** try
***** base

(try
  (do-stuff 42)
  (call-api {:id 17})                                      ;; <1>
  true                                                     ;; <2>
  (catch js/Error e                                        ;; <3>
    (println "An error occurred:" e)
    false)
  (finally
    (do-cleanup)))                                         ;; <4>

1 Multiple expressions can occur inside the body of try
2 try is an expression and returns a value
3 catch is always used with the class of the value that should be
 caught
4 If a finally clause is present, it is called for side effects
***** throw
dev:cljs.user=> (try
           #_=>   (throw {:type :custom-error
           #_=>           :message "Something unpleasant occurred"})
           #_=>   (catch :default e
           #_=>     (println "Caught value:" e)))
Caught value: {:type :custom-error, :message Something unpleasant occurred}
nil
***** ex-info
****** def
(ex-info "A parse error occurred"                          ;; <1>
         {:line 17 :char 8 :last-token "for"}              ;; <2>
         :unexpected-end-of-string)                        ;; <3>

Creating an ExceptionInfo error

1 Error message
2 Metadata
3 Cause (optional)
****** long
(def required-attrs [:id :email])
(def allowed-attrs [:id :email :first-name :last-name])

(defn make-user [user-data]
  (cond
    (not (every? #(contains? user-data %) required-attrs))
    (throw (ex-info "Missing required attributes"
                    {:required required-attrs
                     :found (keys user-data)}
                    :validation-failed))
    (not (every? #(some (set allowed-attrs) %) (keys user-data)))
    (throw (ex-info "Found disallowed attributes"
                    {:allowed allowed-attrs
                     :found (keys user-data)}
                    :validation-failed))
    :else (assoc user-data :type :user)))

(defn hydrate-user []
  (let [serialized-user (try
                          (.getItem js/localStorage "current-user")
                          (catch js/Error _
                            (throw (ex-info "Could not load data from localStorage"
                                            {}
                                            :local-storage-unsupported))))
        user-data (try
                    (.parse js/JSON serialized-user)
                    (catch js/Error _
                      (throw (ex-info "Could not parse user data"
                                      {:string serialized-user}
                                      :parse-failed))))]
    (-> user-data
        (js->clj :keywordize-keys true)
        make-user)))

(try
  (hydrate-user)
  (catch ExceptionInfo e
    (case (ex-cause e)
      :local-storage-unsupported
      (display-error (str "Local storage not supported: "
                                                     (ex-message e)))
      :parse-failed
      (do (display-error "Could not load user data from browser")
          (log-error {:type :user-parse-failed
                      :source (:string (ex-data e))}))
      :validation-failed
      (do (display-error "There was an error in your submission. Please correct it before continuing.")
          (update-field-errors (ex-data e)))
      ;; Re-throw an unknown error
      (throw e))))

***** repl
#+begin_src clojure
(try
  :success
  (catch :default _
    :failure))

#+end_src

#+begin_src clojure
(try
                (throw {:type :custom-error
                                                :message "Something unpleasant occurred"})
                (catch :default e
                        (println "Caught value:" e)))
#+end_src

#+RESULTS:
: Please reevaluate when nREPL is connected

*** colections
**** conj

cljs.user=> (conj '(:lions :tigers) :bears)                ;; <1>
(:bears :lions :tigers)

cljs.user=> (conj [:lions :tigers] :bears)                 ;; <2>
[:lions :tigers :bears]

cljs.user=> (conj #{:lions :tigers} :bears)                ;; <3>
#{:lions :tigers :bears}

cljs.user=> (conj #{:lions :tigers} :tigers)               ;; <4>
#{:lions :tigers}
**** first
**** rest
**** remove
***** pred
(remove pos? [1 -2 2 -1 3 7 0])
;;=> (-2 -1 0)

(remove nil? [1 nil 2 nil 3 nil])
;;=> (1 2 3)

;; remove items that are evenly divisible by 3
(remove #(zero? (mod % 3)) (range 1 21))
;;=> (1 2 4 5 7 8 10 11 13 14 16 17 19 20)
***** codewars

(defn disemvowel [string]
  (->> string
       (remove (set "aeiouAEIOU"))
       (apply str)))

**** repl
***** Sequence
#+begin_src clojure

(def samples [[8 12 4]
              [9 3 3 6]
              [11 4]])

#+end_src

#+RESULTS:
: Please reevaluate when nREPL is connected

** reagent
*** js/alert
(fn [message]
  (js/alert (.toUpperCase (str message "!!!!!!!!!!!!!!!!"))))

(ns my-cljs-project.core)                                  ;; <1>
(js/alert "Hello World")                                   ;; <2>
*** innerHTML
(set! (.-innerHTML someElem)
      (count
        (filter missing-phone? users)))
*** console
*** add input
(in-ns 'learn-cljs.weather)                                ;; <1>
;; nil

(def input (.createElement js/document "input"))           ;; <2>
;; #'learn-cljs.weather/input                              ;; <3>

(.appendChild (.-body js/document) input)
;; #object[HTMLInputElement [object HTMLInputElement]]

(set! (.-placeholder input) "Enter something")             ;; <4>
;; "Enter something"

(defn handle-input [e]                                     ;; <5>
  (swap! app-state assoc :text (-> e .-target .-value)))
;; #'learn-cljs.weather/handle-input

(set! (.-onkeyup input) handle-input)
;; #object[learn_cljs$weather$handle_input ...]

-----------------------------------------

(defn event-value [e] (-> e .-target .-value))
;; #'learn-cljs.weather/event-value

(defn update-text [value]
  (swap! app-state assoc :text value))
;; #'learn-cljs.weather/update-text

(defn handle-input [e]
  (update-text (event-value e)))
;; #'learn-cljs.weather/handle-input
------------------

[:input {:type "text"
         :placeholder "Postal Code"
         :value (:postal-code @app-state)
         :on-change #(swap! app-state assoc :postal-code (-> % .-target .-value))}]
*** button
**** on-click
[:button {:on-click get-forecast!} "Go"]
**** gevents/listen
(defn render [state]                                       ;; <2>
  (set! (.-innerHTML app-container)
        (hiccups/html
          [:div
            [:p "Counter: " [:strong state]]
            [:button {:id "up"} "+"]
            [:button {:id "down"} "-"]])))

(defonce is-initialized?
  (do
    (gevents/listen (gdom/getElement "app") "click"
      (fn [e]
        (condp = (aget e "target" "id")
          "up"   (swap! app-state inc)
          "down" (swap! app-state dec))))

    (add-watch app-state :counter-observer                 ;; <3>
      (fn [key atom old-val new-val]
        (render new-val)))
*** change in map
**** whith swap! and assoc
         (swap! app-state assoc :postal-code (-> % .-target .-value))}]
**** swap! and update-in
(defn handle-response [resp]
  (let [today (get-in resp ["list" 0 "main" "temp"])       ;; <1>
        tomorrow (get-in resp ["list" 8 "main" "temp"])]
    (swap! app-state                                       ;; <2>
        update-in [:temperatures :today :value] (constantly today))
    (swap! app-state
        update-in [:temperatures :tomorrow :value] (constantly tomorrow))))
*** render
(defn mount-app-element []                                 ;; <4>
  (rdom/render [app] (gdom/getElement "app")))

  
(defn app []
  [:div {:class "app"}
   [title]                                                 ;; <2>
   [:div {:class "temperatures"}
    (for [temp (vals (:temperatures @app-state))]          ;; <3>
      [temperature temp])]
   [postal-code]])

(defn title []
  [:h1 (:title @app-state)])


(defonce app-state (r/atom {:title "WhichWeather"
                            :postal-code ""
                            :temperatures {:today {:label "Today"
                                                   :value nil}
                                           :tomorrow {:label "Tomorrow"
                                                      :value nil}}}))

(defn temperature [temp]                                   ;; <1>
  [:div {:class "temperature"}
   [:div {:class "value"}
    (:value temp)]
   [:h2 (:label temp)]])

(mount-app-element)


  <body>
    <div id="app">
    </div> <!-- end of app div -->
    <script src="cljs-out/dev-main.js" type="text/javascript"></script>

** JavaScript
*** acces
js/document
js/window
*** js->clj
*** clj->js
#+begin_src clojure
cljs.user=> (def characters #{"Lucy" "Ricky" "Fred" "Ethel"})
#'cljs.user/characters
cljs.user=> (def js-characters (clj->js characters))
#'cljs.user/js-characters
cljs.user=> js-characters
#js ["Ricky" "Fred" "Lucy" "Ethel"]
cljs.user=> (js->clj js-characters)
["Ricky" "Fred" "Lucy" "Ethel"]
cljs.user=> (= characters (js->clj js-characters))
false
#+end_src
*** testScores
#+begin_src js
var testScores = [                                         // <1>
  { id: 1, score: 86, gradeLetter: "B" },                  // <2>
  { id: 2, score: 93, gradeLetter: "A" },
  { id: 3, score: 78, gradeLetter: "C" },
];
#+end_src



#+begin_src clojure
cljs.user=> (def cljs-scores (js->clj js/testScores))      ;; <1>
#'cljs.user/cljs-scores

cljs.user=> cljs-scores
[{"id" 1, "score" 86, "gradeLetter" "B"}
{"id" 2, "score" 93, "gradeLetter" "A"}
{"id" 3, "score" 78, "gradeLetter" "C"}]

cljs.user=> (conj cljs-scores                              ;; <2>
                  {"id" 4, "score" 87, "gradeLetter" "B"})
[{"id" 1, "score" 86, "gradeLetter" "B"}
{"id" 2, "score" 93, "gradeLetter" "A"}
{"id" 3, "score" 78, "gradeLetter" "C"}
{"id" 4, "score" 87, "gradeLetter" "B"}]

cljs.user=> cljs-scores
[{"id" 1, "score" 86, "gradeLetter" "B"}
{"id" 2, "score" 93, "gradeLetter" "A"}
{"id" 3, "score" 78, "gradeLetter" "C"}]

cljs.user=> (def updated-scores                            ;; <3>
              (conj cljs-scores {"id" 4, "score" 87, "gradeLetter" "B"}))
#'cljs.user/updated-scores

cljs.user=> (set! js/testScores (clj->js updated-scores))  ;; <4>
#js [#js {:id 1, :score 86, :gradeLetter "B"}
#js {:id 2, :score 93, :gradeLetter "A"}
#js {:id 3, :score 78, :gradeLetter "C"}
#js {:id 4, :score 87, :gradeLetter "B"}]
#+end_src

Converting between JavaScript and ClojureScript data

1 Convert testScores to a ClojureScript value
2 Create a modified value by appending a new score and verify that
 the value in the var cljs-scores was not changed
3 Bind the updated scores to the updated-scores var
4 Convert the updated scores back to a JavaScript object and update
 testScores to the new value
*** Objects
**** created
cljs.user=> (js-obj "isJavaScript" true, "type" "object")  ;; <1>
#js {:isJavaScript true, :type "object"}

cljs.user=> #js {"isJavaScript" true, "type" "object"}     ;; <2>
#js {:isJavaScript true, :type "object"}
**** Prop
***** (.-
cljs.user=> (def js-hobbit #js {"name" "Bilbo Baggins", "age" 111})
#'cljs.user/js-hobbit
cljs.user=> (.-age js-hobbit)
111
***** (..
#+begin_src js
// JavaScript nested lookup
var settings = {                                           // <1>
  personal: {
    address: {
      street: "123 Rolling Hills Dr",
    },
  },
};

// Prints "123 Rolling Hills Dr"
console.log(settings.personal.address.street);             // <2>
#+end_src


The syntax is slightly different from a normal property access: (..
obj -propOne -propTwo).

(println
  (.. settings -personal -address -street))
; Prints "123 Rolling Hills Dr"
***** set!

cljs.user=> (set! (.-name js-hobbit) "Frodo")              ;; <1>
"Frodo"

cljs.user=> (set! (.-age js-hobbit) 33)
33

cljs.user=> js-hobbit                                      ;; <2>
#js {:name "Frodo", :age 33}
**** use metod
cljs.user=> (.indexOf primes 11)                           ;; <1>
4

cljs.user=> (.pop primes)                                  ;; <2>
13

cljs.user=> primes
#js [1 3 5 7 11]

Using JavaScript Array Methods

1 Call the indexOf method on primes - equivalent to
 primes.indexOf(11) in JavaScript
2 Call the pop method - equivalent to primes.pop() in JavaScript
*** vector
**** create
cljs.user=> (array "foo" "bar" "baz")
#js ["foo" "bar" "baz"]

cljs.user=> #js [1 3 5 7 11]
#js [1 3 5 7 11]
**** aget and aset
cljs.user=> (def primes #js [1 3 5 7 11])                  ;; <1>
#'cljs.user/primes

cljs.user=> (aget primes 2)                                ;; <2>
5

cljs.user=> (aset primes 5 13)                             ;; <3>
13

cljs.user=> primes                                         ;; <4>
#js [1 3 5 7 11 13]
**** use metod
cljs.user=> (.indexOf primes 11)                           ;; <1>
4

cljs.user=> (.pop primes)                                  ;; <2>
13

cljs.user=> primes
#js [1 3 5 7 11]

Using JavaScript Array Methods

1 Call the indexOf method on primes - equivalent to
 primes.indexOf(11) in JavaScript
2 Call the pop method - equivalent to primes.pop() in JavaScript
**** array-seq
  (doseq [elem (array-seq (gdom/getElementsByClass "contact-summary"))]
    (gevents/listen elem "click"
      (fn [e] (on-open-contact e state)))))
*** exampl
**** input
(in-ns 'learn-cljs.weather)                                ;; <1>
;; nil

(def input (.createElement js/document "input"))           ;; <2>
;; #'learn-cljs.weather/input                              ;; <3>

(.appendChild (.-body js/document) input)
;; #object[HTMLInputElement [object HTMLInputElement]]

(set! (.-placeholder input) "Enter something")             ;; <4>
;; "Enter something"

(defn handle-input [e]                                     ;; <5>
  (swap! app-state assoc :text (-> e .-target .-value)))
;; #'learn-cljs.weather/handle-input

(set! (.-onkeyup input) handle-input)
;; #object[learn_cljs$weather$handle_input ...]


(defn event-value [e] (-> e .-target .-value))
;; #'learn-cljs.weather/event-value

(defn update-text [value]
  (swap! app-state assoc :text value))
;; #'learn-cljs.weather/update-text

(defn handle-input [e]
  (update-text (event-value e)))
;; #'learn-cljs.weather/handle-input
**** repls
#+begin_src clojure
js/testScores

(def cljs-scores (js->clj js/testScores))

cljs-scores

(conj cljs-scores                              ;; <2>
                  {"id" 4, "score" 87, "gradeLetter" "B"})
(set! js/testScores (clj->js (conj cljs-scores {"id" 4, "score" 87, "gradeLetter" "B"})))

(def js-hobbit #js {"name" "Bilbo Baggins", "age" 111})

(def js/hobbit #js {"name" "Bilbo Baggins", "age" 111})

(.-name js-hobbit)
(.-age js-hobbit)

(set! (.-age js-hobbit) 113)

(set! js/hobbit js-hobbit)

js/js-hobbit
js/hobbit



;; var settings = {                                           // <1>
;;   personal: {
;;     address: {
;;       street: "123 Rolling Hills Dr",
;;     },
;;   },
;; };

js/settings

(.-personal js/settings)
(.. js/settings -personal -address -street)


(println (.. js/settings -personal -address -street))


(def student #js {"locker" 212
                  "grades" #js{"Math" "A",
                              "Physics" "B",
                              "English" "A+"}})

student

(.. student -locker)

(.. student -grades )
(.. student -grades -Physics)

(set! js/student student)


(set! (.. student -grades -Physics) "A")

(def primes #js [1 3 5 7 11])

primes

(.pop primes)
(.indexOf primes 5)
(.indexOf primes 7)

;; var books = [
;;   {
;;     title: "A History of LISP",
;;     subjects: ["Common Lisp", "Scheme", "Clojure"],
;;   },
;;   {
;;     title: "All About Animals",
;;     subjects: ["Piranhas", "Tigers", "Butterflies"],
;;   },
;; ];

js/books

(.-title (aget js/books 0))
(aget (.-subjects (aget js/books 0)) 1)

(set! (.-title (aget js/books 1)) "Dangerous Creatures")

(def books (js->clj js/books))

books

(get books 0)
(get  (get books 0) "title")
(get  (get books 0) "subjects")
(get (get  (get books 0) "subjects") 1)

js/books

;; Dangerous Creatures
(get books 1)
(get  (get books 1) "title")
(set! (get  (get books 1) "title") "Dangerous Creatures")

(let [js-book (clj->js js/books)]
    (.push js/books js-book)
    (.-length js/books))
#+end_src
*** date time
**** microsec
***** (.now js/Date)
cljs.user=> (defn with-duration [session end-time]
              (let [duration-in-ms (- end-time (:start session))
                    duration-in-s (.floor Math (/ duration-in-ms 1000))]
                (assoc session :duration duration-in-s)))

cljs.user=> (def my-session
              (session (.now js/Date) true "127.0.0.1" "Some UA"))
#'cljs.user/my-session

;; Wait a few seconds

cljs.user=> (with-duration my-session (.now js/Date))
{:start 1464641029299,
 :is-active? true,
 :ip "127.0.0.1",
 :user-agent "Some UA",
 :page-views [],
 :duration 14}
**** getHours
(defn get-current-hour []                                  ;; <1>
  (.getHours (js/Date.)))

(defn get-time-of-day-greeting [hour]                      ;; <2>
  (condp >= hour
    11 "Good morning"
    15 "Good day"
    "Good evening"))

(get-time-of-day-greeting (get-current-hour))
;; "Good day"
**** Date 
(defn get-current-hour []                                  ;; <1>
  (.getHours (js/Date.)))

(defn get-time-of-day-greeting [hour]                      ;; <2>
  (condp >= hour
    11 "Good morning"
    15 "Good day"
    "Good evening"))

(get-time-of-day-greeting (get-current-hour))
;; "Good day"
** Google Closure’s
*** .querySelector
cljs.user=> (def body (.querySelector js/document "body")) ;; <2>
(def body (.querySelector js/document "body"))
#'cljs.user/body
*** gdom
**** require
cljs.user=> (require '[goog.dom :as gdom])                 ;; <1>
(require '[goog.dom :as gdom])
nil
**** createElement
cljs.user=> (def heading (gdom/createElement "h1"))        ;; <3>
(def heading (gdom/createElement "h1"))
#'cljs.user/heading
**** setTextContent
cljs.user=> (gdom/setTextContent heading "I am new")
(gdom/setTextContent heading "I am new")
nil
**** appendChild
cljs.user=> (gdom/appendChild body heading)                ;; <4>
(gdom/appendChild body heading)
nil
**** removeNode

Use the goog.dom.removeNode() function to remove both the h1
(gdom/removeNode heading)

**** setProperties
cljs.user=> (gdom/setProperties heading #js {"style" "color:red;"
                                             "class" "big-title"})

(gdom/setProperties heading #js {"style" "color:red;"
                                             "class" "big-title"})
**** gdom/getElement
****** get by id
(.-value (gdom/getElement id))
****** get and set value
(def input (gdom/getElement "user-input"))
#'cljs.user/input

(def target (gdom/getElement "copy-target"))
#'cljs.user/target

(.-value input)                                ;; <1>
"ClojureScript is fun"

(set! (.-value input) "ClojureScript is fun")


(gdom/setTextContent target (.-value input))
nil

*** goog.events
**** q
(require '[goog.events :as gevents])
nil

(defn update-target [evt]                      ;; <1>
              (gdom/setTextContent target
                (.. evt -currentTarget -value)))
#'cljs.user/update-target

(gevents/listen input                          ;; <2>
                            "keyup"
                            update-target)
#object[Object [object Object]]
**** example
#+begin_src clojure
(ns passwords.core
  (:require [goog.dom :as gdom]
            [goog.events :as gevents]))

(defn values-same? [field-1 field-2]
  (= (aget field-1 "value")
     (aget field-2 "value")))

(defn handle-change [password confirmation status]
  (gdom/setTextContent status
                       (if (values-same? password confirmation)
                         "Matches"
                         "Do not match")))

(let [password (gdom/createElement "input")
      confirmation (gdom/createElement "input")
      status (gdom/createElement "p")
      app (gdom/getElement "app")]
  (gdom/setProperties password #js {"type" "password"})
  (gdom/setProperties confirmation #js {"type" "password"})

  (gevents/listen password "keyup"
                  #(handle-change password confirmation status))
  (gevents/listen confirmation "keyup"
                  #(handle-change password confirmation status))

  (gdom/setTextContent app "")
  (gdom/appendChild app password)
  (gdom/appendChild app confirmation)
  (gdom/appendChild app status))
#+end_src
*** repl
#+begin_src clojure
(require '[goog.dom :as gdom])
(require '[goog.events :as gevents])

(def status (gdom/createElement "h1"))
(gdom/setTextContent status "Enter password")

(def pass-one (gdom/createElement "input"))
(def pass-tow (gdom/createElement "input"))
(gdom/setProperties pass-one #js {"type" "password"})
(gdom/setProperties pass-tow #js {"type" "password"})

(gdom/appendChild target status)
(gdom/appendChild target pass-one)
(gdom/appendChild target pass-tow)

(defn pass-checker-one[event]
  (if (= (.-value pass-one) (.-value pass-tow))
    (gdom/setTextContent status "match")
    (gdom/setTextContent status "not match")))
                       

              ;; (gdom/setTextContent target
              ;;   (.. evt -currentTarget -value)))

(gevents/listen pass-one                          ;; <2>
                            "keyup"
                            pass-checker-one)


(gevents/listen pass-tow                          ;; <2>
                            "keyup"
                            pass-checker-one)
#+end_src
* NEXT Log
:PROPERTIES:
:header-args: :tangle no 
:END:
** NEXT reagent-test
*** new project
clj -X:new :template figwheel-main :name learn-cljs/reagent-test :args '["+deps"]'
cd reagent-test
*** build
clj -A:fig:build

(js/alert "Am I connected?")

  To get started:
  -->  Change into the 'reagent-test' directory
  -->  Start build with 'clojure -M:fig:build'
*** run in eshell
**** run  eshell
#+begin_src elisp :results output silent :dir reagent-test
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
  (evil-window-split)
  (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** comannds
clj -A:fig:build
(js/alert "Am I connected?")
  Exit: :cljs/quit
cljs/quit
(cljs/quit)
*** files
**** deps.edn
(find-file-other-frame "~/Dev/ClojureScript/tutorials/my-cljs-project/reagent-test/deps.edn")

:deps {;; Other deps...
       reagent/reagent {:mvn/version "1.0.0"}}

        org.clojure/data.json {:mvn/version "2.5.1"}
**** index.html
(find-file-other-frame "~/Dev/ClojureScript/tutorials/my-cljs-project/reagent-test/resources/public/index.html")
**** src/reagent_test/core.cljs
***** file
(find-file-other-frame "reagent-test/src/learn_cljs/reagent_test.cljs")
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/reagent-test/src/learn_cljs/
***** src/reagent_test/core.cljs
:PROPERTIES:
:header-args: :tangle reagent-test/src/learn_cljs/reagent_test.cljs
:END:
****** +original+
#+begin_src clojure :tangle no
(ns ^:figwheel-hooks learn-cljs.reagent-test
  (:require
   [goog.dom :as gdom]))

(println "This text is printed from src/learn_cljs/reagent_test.cljs. Go ahead and edit it and see reloading in action.")

(defn multiply [a b] (* a b))

;; define your app data so that it doesn't get over-written on reload
(defonce app-state (atom {:text "Hello world!"}))

(defn get-app-element []
  (gdom/getElement "app"))



;; specify reload hook with ^:after-load metadata
(defn ^:after-load on-reload []
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
)

#+end_src
****** ns
org sorce blok tag :backend nil
(setq org-babel-clojure-backend nil)
(setq org-babel-clojure-backend 'clojure-cli)

#+begin_src clojure 
(ns learn-cljs.reagent-test
    (:require [reagent.core :as r]                         ;; <1>
              [reagent.ratom :as ratom]                    ;; <2>
              [reagent.dom :as rdom]
              [goog.dom :as gdom]
              [goog.events :as gevents]))
#+end_src

****** cells
#+begin_src clojure
(def a-cell (r/atom 0))                                    ;; <3>
(def b-cell (r/atom 0))
(def c-cell
  (ratom/make-reaction                                     ;; <4>
    #(+ @a-cell @b-cell)))

(def a (gdom/getElement "cell-a"))
(def b (gdom/getElement "cell-b"))
(def c (gdom/getElement "cell-c"))
(def test-text (gdom/getElement "test-text"))

(defn update-cell [cell]
  (fn [e]
    (let [num (js/parseInt (.. e -target -value))]
      (reset! cell num))))


(gevents/listen a "change" (update-cell a-cell))           ;; <5>
(gevents/listen b "change" (update-cell b-cell))

(ratom/run!                                                ;; <6>
  (set! (.-value c) @c-cell)
  )
#+end_src
****** state
#+begin_src clojure 


(defn- date-string [d]
  (let [pad-zero #(.padStart (.toString %) 2 "0")
        y (.getFullYear d)
        m (-> (.getMonth d) inc pad-zero)
        d (pad-zero (.getDate d))]
    (str y "-" m "-" d)))

(defn- current-date-string [d]
  (let [pad-zero #(.padStart (.toString %) 2 "0")
        y (.getFullYear d)
        m (-> (.getMonth d) inc pad-zero)
        d (pad-zero (.getDate d))]
    (str y "-" m "-" d)))

(defn initial-inputs []
  {:date (date-string (js/Date.))
  ;; {:date (current-date-string (js/Date.))
   :minutes "0"})

(defonce state
  (r/atom {:inputs (initial-inputs)
           :entries {}}))

(defn date-input []
  (let [val (r/cursor state [:inputs :date])]              ;; <1>
    (fn []
      [:div.input-wrapper
        [:label "Day"]
        [:input {:type "date"
                 :value @val                               ;; <2>
                 :on-change #(reset! val                   ;; <3>
                               (.. % -target -value))}]])))

(defn time-input []
  (let [val (r/cursor state [:inputs :minutes])]
    (fn []
      [:div.input-wrapper
       [:label "Time (minutes)"]
       [:input {:type "number" :min 0 :step 1
                :value @val
                :on-change #(reset! val (.. % -target -value))}]])))

#+end_src
(defn time-input []
  [:div.input-wrapper
    [:label "Time (minutes)"]
    [:input {:type "number" :min 0 :step 1}]])
    
(defn date-input []
  [:div.input-wrapper
    [:label "Day"]
    [:input {:type "date"
             :value (get-in @state [:inputs :date])
             :on-change #(swap! state assoc-in [:inputs :date]
                           (.. % -target -value))}]])
(defn date-input []
  [:div.input-wrapper
    [:label "Day"]
    [:input {:type "date"
             :value (get-in @state [:inputs :date])}]])
****** submit
#+begin_src clojure 
(defn submit-button []
  [:div.actions
   [:button {:type "submit"} "Submit"]])

(defn submit-form [state]
  (let [{:keys [date minutes]} (:inputs state)]
    (-> state
        (assoc-in [:entries date] (js/parseInt minutes))
        (assoc :inputs (initial-inputs)))))

#+end_src

(defn form []
  [:form.input-form {:on-submit (fn [e]
                                  (.preventDefault e)
                                  (swap! state submit-form))}
    ;; ...
  ])
(defonce state
  ;; (r/atom {:inputs {:date (date-string (js/Date.))
  (r/atom {:inputs {:date (current-date-string (js/Date.))
                    :minutes "0"}}))
****** chart recton
#+begin_src clojure 
(defn get-points [entries]
  (let [ms-in-day 86400000
        chart-days 30
        now (js/Date.now)]
    (map (fn [i]
           (let [days-ago (- chart-days (inc i))
                 date (date-string (js/Date. (- now (* ms-in-day days-ago))))]
             (get entries date 0)))
         (range chart-days))))


#+end_src
****** chart
#+begin_src clojure
(defn- random-point []
  (js/Math.floor (* (js/Math.random) 100)))

(defonce chart-data
  (let [points (map random-point (range 30))]              ;; <1>
    (r/atom {:points points
             :chart-max (reduce max 1 points)})))

(def chart-width 400)
(def chart-height 200)
(def bar-spacing 2)

(defn chart []
  (let [entries (r/cursor state [:entries])
        chart-data (ratom/make-reaction
                    #(let [points (get-points @entries)]
                       {:points points
                        :chart-max (reduce max 1 points)}))]
    (fn []
      (let [{:keys [points chart-max]} @chart-data
            bar-width (- (/ chart-width (count points))
                         bar-spacing)]
        [:svg.chart {:x 0 :y 0
                     :width chart-width :height chart-height}
         (for [[i point] (map-indexed vector points)
               :let [x (* i (+ bar-width bar-spacing))
                     pct (- 1 (/ point chart-max))
                     bar-height (- chart-height (* chart-height pct))
                     y (- chart-height bar-height)]]
           [:rect {:key i
                   :x x :y y
                   :width bar-width
                   :height bar-height}])]))))

#+end_src
****** aditional functions
#+begin_src clojure

#+end_src
****** CANCELED hello world
CLOSED: [2025-05-22 Thu 00:45]

(ns learn-cljs.exercise-tracker
  (:require [reagent.dom :as rdom]
            [goog.dom :as gdom]))
#+begin_src clojure :tangle no

(defn hello []
  [:p "Hello World"])

(rdom/render
  hello                                                    ;; <1>
  (gdom/getElement "app"))                                 ;; <2>
#+end_src
****** form
(defn date-input []
  [:div.input-wrapper                                      ;; <1>
    [:label "Day"]
    [:input {:type "date"}]])                              ;; <2>

#+begin_src clojure
(defn form []
  [:form.input-form {:on-submit (fn [e]
                                    (.preventDefault e)
                                    (swap! state submit-form))}
    [date-input]                                           ;; <3>
    [time-input]
    [submit-button]])
#+end_src
  [:form.input-form

****** render app
(defn app []
  [form])
#+begin_src clojure
(defn app []
  [:div.app
    [chart]
    [form]])

(rdom/render
  [app]
  (gdom/getElement "app"))
#+end_src

(set! test-text (hello))
(js/alert "Am I connected?")
***** repl to send
[reagent.dom :as rdom]
(require '[reagent.dom :as rdom] :reload)
(require '[reagent.dom :as rdom] )
(require '[reagent.dom :as rdom] )
(:require [reagent.core :as r]                         
              [reagent.ratom :as ratom]               
              [reagent.dom :as rdom]
              [goog.dom :as gdom]
              [goog.events :as gevents])

# (ns learn-cljs.reagent-test
(in-ns 'learn-cljs.reagent-test)

(rdom/render
  hello
  (gdom/getElement "app"))

(rdom/render hello)


(rdom/render
  (hello)
  (gdom/getElement "app"))
*** run
(buyn-shell-start "konsole -e 'cd ~/Dev/ClojureScript/tutorials/my-cljs-project/reagent-test/'")
#+begin_src elisp :results output silent :dir reagent-test
(buyn-shell-start "konsole -e 'clj -M:fig:build'")
;; (evil-previous-line)
;; (org-cycle)
(delete-other-windows)
#+end_src
*** repl
**** open eshell
#+begin_src elisp :results output silent :dir reagent-test
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** command
cd reagent-test
clj -A:fig:build

(in-ns 'learn-cljs.reagent-test)
#+begin_src elisp :results output silent :dir reagent-test
clj -A:fig:build
#+end_src
*** NEXT todo
**** разобратся с танглом
какого чёрта оно отвалилос
(prn (binding [*out* (java.io.StringWriter.)
**** DONE открыть книжну версию
CLOSED: [2025-05-21 Wed 21:24]
**** DONE перенести измения 
CLOSED: [2025-05-21 Wed 21:24]
сделать похожим
**** CANCELED убирать пока не запустится
CLOSED: [2025-05-22 Thu 00:34]
**** CANCELED установить функцию ошибки
CLOSED: [2025-05-22 Thu 00:34]
**** CANCELED посторатся понять что конкретно мешает
CLOSED: [2025-05-22 Thu 00:34]
**** DONE запусить хоть что-то
CLOSED: [2025-06-05 Thu 00:42]
похоже проблема в кложуре а не в прграме
удивительно но нет в браузере!!! но скрипт блочил локалхост
**** DONE пообшать гпт
CLOSED: [2025-06-05 Thu 00:42]
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/reagent-test/dev.cljs.edn

^{:watch-dirs ["src"]
  :css-dirs ["resources/public/css"]
  :auto-testing true
   }
{:main learn-cljs.reagent-test}

tree src/

src/
`-- learn_cljs
    `-- reagent_test.cljs

/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/reagent-test/resources/public/index.html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="css/style.css" rel="stylesheet" type="text/css">
    <link rel="icon" href="https://clojurescript.org/images/cljs-logo-icon-32.png">
  </head>
  <body>
    <h1>Reactive Cells</h1>
    <div>
      <label id="test-text">empty </label>
    </div>
    <div>
      <label for="cell-a">A: </label>
      <input id="cell-a" type="number" value="0" />
    </div>
    <div>
      <label for="cell-b">B: </label>
      <input id="cell-b" type="number" value="0" />
    </div>
    <div>
      <label for="cell-c">C: </label>
      <input id="cell-c" readonly type="number" />
    </div>
    <div id="app"></div>    
    <!-- KEEP THIS SCRIPT TAG : IT LOADS YOUR APPLICATION CODE -->
    <script src="cljs-out/dev-main.js" type="text/javascript"></script>
  </body>
</html>

browser console log
Content-Security-Policy: The page’s settings blocked an inline script (script-src-elem) from being executed because it violates the following directive: “script-src-elem 'none'” 3 sandbox eval code:17:34
Content-Security-Policy: The page’s settings blocked the loading of a resource (media-src) at data: because it violates the following directive: “media-src http: file:” 3 localhost:9500
Content-Security-Policy: The page’s settings blocked a JavaScript eval (script-src) from being executed because it violates the following directive: “script-src 'none'” (Missing 'unsafe-eval')
Source: HTMLElement.prototype.focus = ((realFocu… 3 localhost:9500
Adding a listener for beforescriptexecute events is deprecated and will be removed soon. DocumentCSP.js:33:28
Loading failed for the <script> with source “http://localhost:9500/cljs-out/dev-main.js”. localhost:9500:28:63
Content-Security-Policy: The page’s settings blocked a script (script-src-elem) at http://localhost:9500/cljs-out/dev-main.js from being executed because it violates the following directive: “script-src-elem 'none'” 4 localhost:9500
Error processing sheet 
CSSStyleSheet 
 DOMException: CSSStyleSheet.cssRules getter: Not allowed to access cross-origin stylesheet
    process moz-extension://5cffb2dc-415f-4314-8066-808e7d149831/nscl/content/prefetchCSSResources.js:165
    checkNode moz-extension://5cffb2dc-415f-4314-8066-808e7d149831/nscl/content/prefetchCSSResources.js:245
    observer moz-extension://5cffb2dc-415f-4314-8066-808e7d149831/nscl/content/prefetchCSSResources.js:287
prefetchCSSResources.js:175:17
** weather
*** new project
clj -X:new :template figwheel-main :name learn-cljs/weather :args '["+deps" "--reagent"]'
$ clj -X:new :template figwheel-main :name learn-cljs/weather :args 
*** bilde
cd weather                                               # <1>
clj -A:fig:build                                         # <2>
*** Running Figwheel
*** run in eshell
**** run  eshell
#+begin_src elisp :results output silent
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
  (evil-window-split)
  (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** comannds
cd weather
clj -A:fig:build
*** repls commands
**** test
(in-ns 'learn-cljs.weather)                                ;; <1>
;; nil

(def input (.createElement js/document "input"))           ;; <2>
;; #'learn-cljs.weather/input                              ;; <3>

(.appendChild (.-body js/document) input)
;; #object[HTMLInputElement [object HTMLInputElement]]

(set! (.-placeholder input) "Enter something")             ;; <4>
;; "Enter something"

(defn handle-input [e]                                     ;; <5>
  (swap! app-state assoc :text (-> e .-target .-value)))
;; #'learn-cljs.weather/handle-input

(set! (.-onkeyup input) handle-input)
;; #object[learn_cljs$weather$handle_input ...]
**** refactored
(defn event-value [e] (-> e .-target .-value))
;; #'learn-cljs.weather/event-value

(defn update-text [value]
  (swap! app-state assoc :text value))
;; #'learn-cljs.weather/update-text

(defn handle-input [e]
  (update-text (event-value e)))
;; #'learn-cljs.weather/handle-input
**** add button
(in-ns 'learn-cljs.weather)                                ;; <1>
** starbase
*** run in eshell
**** run eshell
#+begin_src elisp :results output silent
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
  (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** comannds
cd starbase
clj -A:fig:build
*** add code
**** cljs
***** 1
(defn prompt [game current]                                ;; <1>
  (let [scene (get game current)                           ;; <2>
        type (:type scene)]
    (io/clear term)
    (when (or (= :win type)                                ;; <3>
              (= :lose type))
      (io/print term
                (if (= :win type)                          ;; <4>
                    "You've Won! "
                    "Game Over ")))
    (io/println term (:title scene))                       ;; <5>
    (io/println term (:dialog scene))
    (io/read term #(on-answer game current %))))           ;; <6>
***** 2
(defn on-answer [game current answer]
  (let [scene (get game current)
        next ;; TODO: determine the next state
        ]
    (prompt game next)))
** starbase_E
*** run in eshell
**** run eshell
#+begin_src elisp :results output silent :dir starbase_E
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
  (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** comannds
clj -A:fig:build
*** add code
**** cljs
** doing-io
*** new
**** run eshell
#+begin_src elisp :results output silent
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
  (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** new
призапуске из корневека путь это что внутренее оно определе путь в сорс проекта к корне будет создан проетс коненым имене. короче запускай из крнят- небзди и не умнячайй,всё будет рокенрол
clj -X:new :template figwheel-main :name learn-cljs/doing-io :args '["+deps"]'
cd doing-io
clj -A:fig:build
**** comannds
clj -A:fig:build

(js/alert "Am I connected?")
**** file
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/doing-io/src/learn_cljs/doing-io.cljs
*** change
**** run eshell
#+begin_src elisp :results output silent :dir doing-io
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
  (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** comannds
clj -A:fig:build

(js/alert "Am I connected?")
**** cljs
*** files
**** cljs
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/doing-io/src/learn_cljs/doing-io.cljs
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/doing-io/src/learn_cljs/doing_io.cljs")
**** 
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/doing-io/resources/public/index.html")
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/doing-io/resources/public/index.html
*** repl
**** tax card
#+begin_src clojure
(ns shopping-cart.core
  (:require [goog.dom :as gdom]))

(def tax-rate 0.079)
(def cart [{:name "Silicone Pancake Mold" :price 10.49 :taxable? false}
           {:name "Small Pour-Over Coffee Maker" :price 18.96 :taxable? true}
           {:name "Digital Kitchen Scale" :price 24.95 :taxable? true}])

(defn add-sales-tax [cart-item]
  (assoc cart-item
         :sales-tax (* (:price cart-item) tax-rate)))

(def taxable-cart
  (map add-sales-tax
       (filter :taxable? cart)))

(def item-list (gdom/createDom "ul" nil ""))

;; Helper function to generate the display text for a product
(defn display-item [item]
  (str (:name item)
       ": "
       (:price item)
       " (tax: "
       (.toFixed (:sales-tax item) 2)
       ")"))

;; Create the list of products
(doseq [item taxable-cart]
  (gdom/appendChild
   item-list
   (gdom/createDom "li" #js {} (display-item item))))

;; Clear the entire document and append the list
(gdom/removeChildren (.-body js/document))
(gdom/appendChild (.-body js/document) item-list)
#+end_src

#+RESULTS:
: Please reevaluate when nREPL is connected
** contacts
*** new project
clj -X:new :template figwheel-main :name learn-cljs/contacts :args '["+deps"]'
cd contacts
clj -A:fig:build
*** bilde
cd contacts
clj -A:fig:build                                         # <2>
*** run in eshell
**** run eshell
#+begin_src elisp :results output silent :dir contacts
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
  (evil-window-split)
  (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
**** comannds
clj -A:fig:build
(js/alert "Am I connected?")
* Sorce files
** Sorce files project ferst
:PROPERTIES:
:header-args: :mkdirp yes
:END:
*** deps.edn
:PROPERTIES:
:header-args: :tangle  deps.edn
:END:
#+begin_src edn
{:deps {org.clojure/clojurescript {:mvn/version "1.10.773"}}
 :paths ["src"]
:aliases
  {:dev {:main-opts ["-m" "cljs.main"
                     "--compile" "my-cljs-project.core"
                     "--repl"]}}}
#+end_src
*** src/my_cljs_project/core.cljs
:PROPERTIES:
:header-args: :tangle  src/my_cljs_project/core.cljs
:END:
#+begin_src clojure
(ns my-cljs-project.core)                                  ;; <1>

(js/alert "Hello World!")                                   ;; <2>
#+end_src
*** index.html
:PROPERTIES:
:header-args: :tangle  index.html
:END:
#+begin_src edn
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
  </head>
  <body>
    <script src="out/main.js" type="text/javascript"></script>
  </body>
</html>
#+end_src
** weather
:PROPERTIES:
:header-args: :mkdirp yes
:END:
*** core.cljs
:PROPERTIES:
:header-args: :tangle  weather/src/learn_cljs/weather.cljs
:END:
**** link
[[file:weather/src/learn_cljs/weather.cljs::(ns ^:figwheel-hooks learn-cljs.weather]]
**** ns
#+begin_src clojure
(ns ^:figwheel-hooks learn-cljs.weather                    ;; <1>
  (:require
   [goog.dom :as gdom]
   [reagent.dom :as rdom]
   [reagent.core :as r]
   [ajax.core :as ajax]))
#+end_src
**** defonce
#+begin_src clojure
(defonce app-state (r/atom {:title "WhichWeather"
                            :postal-code ""
                            :api-key ""
                            :temperatures {:today {:label "Today"
                                                   :value nil}
                                           :tomorrow {:label "Tomorrow"
                                                      :value nil}}}))
#+end_src
**** ajax get forecast
***** handle-response
#+begin_src clojure
(defn handle-response [resp]
  (let [today (get-in resp ["list" 0 "main" "temp"])       ;; <1>
        tomorrow (get-in resp ["list" 8 "main" "temp"])]
    (swap! app-state                                       ;; <2>
        update-in [:temperatures :today :value] (constantly today))
    (swap! app-state
        update-in [:temperatures :tomorrow :value] (constantly tomorrow))))
#+end_src
***** get-forecast!
#+begin_src clojure
(defn get-forecast! []
  (let [postal-code (:postal-code @app-state)]             ;; <1>
    (ajax/GET "http://api.openweathermap.org/data/2.5/forecast"
         {:params {"q" postal-code
                   "appid" "12b0904cfab748cbcb6e98a5dc7c7ac4"
                   "units" "imperial"}
          :handler handle-response})))                     ;; <2>
#+end_src
**** structur
#+begin_src clojure
(defn title []
  [:h1 (:title @app-state)])

(defn temperature [temp]                                   ;; <1>
  [:div {:class "temperature"}
   [:div {:class "value"}
    (:value temp)]
   [:h2 (:label temp)]])

(defn postal-code []
  [:div {:class "postal-code"}
    [:h3 "Enter your postal code"]
    [:input {:type "text"
          :placeholder "api-key"
          :value (:api-key @app-state)
          :on-change #(swap! app-state assoc :api-key (-> % .-target .-value))}]
    [:input {:type "text"
          :placeholder "Postal Code"
          :value (:postal-code @app-state)
          :on-change #(swap! app-state assoc :postal-code (-> % .-target .-value))}]
    [:button {:on-click get-forecast!} "Go"]])

(defn app []
  [:div {:class "app"}
   [title]                                                 ;; <2>
   [:div {:class "temperatures"}
    (for [temp (vals (:temperatures @app-state))]          ;; <3>
      [temperature temp])]
   [postal-code]])

#+end_src
**** render
#+begin_src clojure
(defn mount-app-element []                                 ;; <4>
  (rdom/render [app] (gdom/getElement "app")))

(mount-app-element)

(defn ^:after-load on-reload []                            ;; <4>
  (mount-app-element))
#+end_src

*** dev.cljs.edn
:PROPERTIES:
:header-args: :tangle  weather/dev.cljs.edn
:END:
[[file:weather/dev.cljs.edn::^{:watch-dirs \["test" "src"\]]]
#+begin_src clojure
^{:watch-dirs ["src"]
  :css-dirs ["resources/public/css"]
  :auto-testing true
   }
{:main learn-cljs.weather}
#+end_src

*** deps.edn
:PROPERTIES:
:header-args: :tangle  weather/deps.edn
:END:
[[file:weather/deps.edn::{:deps {org.clojure/clojure {:mvn/version "1.10.0"}]]
#+begin_src clojure
{:deps {org.clojure/clojure {:mvn/version "1.10.0"}
        org.clojure/clojurescript {:mvn/version "1.11.4"}
        cljsjs/react {:mvn/version "17.0.2-0"}
        cljsjs/react-dom {:mvn/version "17.0.2-0"}
        reagent/reagent {:mvn/version "1.1.1" }
        cljs-ajax {:mvn/version "0.8.1"} ;; Added
        }
 :paths ["src" "resources"]
 :aliases {:fig {:extra-deps
                 {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}
                  org.slf4j/slf4j-nop {:mvn/version "1.7.30"}
                  com.bhauman/figwheel-main {:mvn/version "0.2.17"}}
                 :extra-paths ["target" "test"]}
           :build {:main-opts ["-m" "figwheel.main" "-b" "dev" "-r"]}
           :min   {:main-opts ["-m" "figwheel.main" "-O" "advanced" "-bo" "dev"]}
           :test  {:main-opts ["-m" "figwheel.main" "-co" "test.cljs.edn" "-m" "learn-cljs.test-runner"]}}}
#+end_src

*** style.css
:PROPERTIES:
:header-args: :tangle  weather/resources/public/css/style.css
:END:
[[file:weather/resources/public/css/style.css::/* some style */]]
#+begin_src css
body {
  font-family: Helvetica, Arial, sans-serif;
  background-color: #02a4ff;
  color: #ffffff;
}

h1 {
  font-weight: 300;
}

button {
  border-left: none;
  border-top-right-radius: 5px;
  border-bottom-right-radius: 5px;
  background: #205184;
  border: none;
  line-height: 20px;
  color: #fff;
  padding: 2px 12px;
  font-weight: bold;
}

.temperatures {
  display: flex;
}

.temperatures > .temperature {
  margin-right: 20px;
  background: #fff;
  color: #333;
  text-align: center;
  flex-basis: 150px;
  border-radius: 10px;
  
  display: flex;
  flex-direction: column;
}

.temperatures > .temperature > .value {
  font-size: 130%;
  font-weight: lighter;
  padding: 4px;
  flex-basis: 26px;
}

.temperatures > .temperature > h2 {
  margin: 0;
  background-color: #69C9FF;
  color: #ffffff;
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
}
#+end_src
** starbase
:PROPERTIES:
:header-args: :mkdirp yes
:END:
*** starbase.cljs
:PROPERTIES:
:header-args: :tangle  starbase/src/learn_cljs/starbase.cljs
:END:
[[file:starbase/src/learn_cljs/starbase.cljs::(ns learn-cljs.starbase]]
**** ns
#+begin_src clojure
(ns learn-cljs.starbase
  (:require [bterm.core :as bterm]
            [bterm.io :as io]
            [learn-cljs.starbase.data :as data]
            [goog.dom :as gdom]))

(enable-console-print!)

(def term
  (bterm/attach (gdom/getElement "app")
                {:prompt "=> "
                 :font-size 14}))

(declare on-answer)

(defn prompt [game current]                                ;; <1>
  (let [scene (get game current)                           ;; <2>
        type (:type scene)]
    (io/clear term)
    (when (or (= :win type)                                ;; <3>
              (= :lose type))
      (io/print term
                (if (= :win type)                          ;; <4>
                    "You've Won! "
                    "Game Over ")))
    (io/println term (:title scene))                       ;; <5>
    (io/println term (:dialog scene))
    (io/read term #(on-answer game current %))))           ;; <6>

#+end_src
**** answer
#+begin_src clojure
(defn on-answer [game current answer]
  (let [scene (get game current)
        next (if (= :skip (:type scene))
               (:on-continue scene)
               (if (= "yes" answer)
                 (get-in scene [:transitions "yes"])
                 (get-in scene [:transitions "no"])))]
    (prompt game next)))
#+end_src
**** start
#+begin_src clojure
(prompt data/game :start)
#+end_src
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/starbase/src/learn_cljs/starbase.cljs
** starbase_E
[[file:starbase_E/src/learn_cljs/starbase.cljs::(ns learn-cljs.starbase][starbase.cljs]]
** doing-io
:PROPERTIES:
:header-args: :mkdirp yes
:END:
*** doing-io.cljs
:PROPERTIES:
:header-args: :tangle  doing-io/src/learn_cljs/doing-io.cljs
:END:
**** file
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/doing-io/src/learn_cljs/doing_io.cljs")

/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/doing-io/src/learn_cljs/doing-io.cljs
**** all
#+begin_src clojure
(ns ^:figwheel-hooks learn-cljs.doing-io
  (:require
   [goog.dom :as gdom]))

(println "This text is printed from src/learn_cljs/doing_io.cljs. Go ahead and edit it and see reloading in action.")

(defn multiply [a b] (* a b))

;; define your app data so that it doesn't get over-written on reload
(defonce app-state (atom {:text "Hello world!"}))

(defn get-app-element []
  (gdom/getElement "app"))



;; specify reload hook with ^:after-load metadata
(defn ^:after-load on-reload []
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
)
#+end_src
***** 
** contacts
:PROPERTIES:
:header-args: :mkdirp yes
:END:
*** contacts.cljs
:PROPERTIES:
:header-args: :tangle  contacts/src/learn_cljs/contacts.cljs
:END:
**** file
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/contacts/src/learn_cljs/contacts.cljs")

**** # origin comented
#+begin_src clojure :tangle no
(ns ^:figwheel-hooks learn-cljs.contacts
  (:require
   [goog.dom :as gdom]))

(println "This text is printed from src/learn_cljs/contacts.cljs. Go ahead and edit it and see reloading in action.")

(defn multiply [a b] (* a b))

;; define your app data so that it doesn't get over-written on reload
(defonce app-state (atom {:text "Hello world!"}))

(defn get-app-element []
  (gdom/getElement "app"))



;; specify reload hook with ^:after-load metadata
(defn ^:after-load on-reload []
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
)
#+end_src
**** src
***** ns
# (ns ^:figwheel-hooks learn-cljs.contacts
# (require '[clojure.string :as str])
# (require '[goog.events :as gevents])
#+begin_src clojure
(ns learn-cljs.contacts                 ;
  (:require
    [goog.dom :as gdom]
    [hiccups.runtime]
    [goog.events :as gevents]
    [clojure.string :as str])
  (:require-macros [hiccups.core :as hiccups]))

(declare refresh! Set-app-html!)
#+end_src
***** Models and State
****** contact-list
#+begin_src clojure
(def contact-list [
                   {:first-name "Phillip"
                    :last-name "Jordan"
                    :email "phil.j@hotmail.com"
                    :address {:street "523 Sunny Hills Cir."
                              :city "Springfield"
                              :state "MI"
                              :postal "11111"
                              :country "USA"}}])


#+end_src
****** make-contact
#+begin_src clojure
(defn make-address [address]
  (select-keys address [:street :city :state :country]))

(defn maybe-set-address [contact]                          ;; <1>
  (if (:address contact)
    (update contact :address make-address)
    contact))

(defn make-contact [contact]
  (-> contact                                              ;; <2>
      (select-keys [:first-name :last-name :email])
      (maybe-set-address)))

(defn add-contact [contact-list input]
  (conj contact-list
        (make-contact input)))

(defn remove-contact [contact-list idx]
  (vec                                                     ;; <1>
    (concat                                                ;; <2>
      (subvec contact-list 0 idx)                          ;; <3>
      (subvec contact-list (inc idx)))))

(defn replace-contact [contact-list idx input]
  (assoc contact-list idx (make-contact input)))
#+end_src
****** initial-state
#+begin_src clojure
(def initial-state
  {:contacts contact-list
   :selected nil
   :editing? false})
#+end_src
****** declare refresh!
#+begin_src clojure
(def app-container (gdom/getElement "app"))
#+end_src

***** UI
****** top-bar
#+begin_src clojure
(def top-bar
  [:div {:class "navbar has-shadow"}
   [:div {:class "container"}
    [:div {:class "navbar-brand"}
     [:span {:class "navbar-item"}
      "ClojureScript Contacts"]]]])

        
#+end_src

****** render-contact-details
#+begin_src clojure
(defn form-field                                           ;; <1>
  ([id value label] (form-field id value label "text"))
  ([id value label type]
   [:div {:class "field"}
     [:label {:class "label"} label]
     [:div {:class "control"}
       [:input {:id id
                :value value
                :type type
                :class "input"}]]]))

(defn render-contact-details [contact]
  (let [address (get contact :address {})]                 ;; <2>
    [:div {:id "contact-form" :class "contact-form"}
      (form-field "input-first-name" (:first-name contact) "First Name")
      (form-field "input-last-name" (:last-name contact) "Last Name")
      (form-field "input-email" (:email contact) "Email" "email")
      [:fieldset
        [:legend "Address"]
        (form-field "input-street" (:street address) "Street")
        (form-field "input-city" (:city address) "City")
        (form-field "input-state" (:state address) "State")
        (form-field "input-postal" (:postal address) "Postal Code")
        (form-field "input-country" (:country address) "Country")]]))
#+end_src
****** section-header
#+begin_src clojure
(defn action-button [id text icon-class]
  [:button {:id id
            :class "button is-primary is-light"}
    [:span {:class (str "mu " icon-class)}]
    (str " " text)])

(def save-button (action-button "save-contact" "Save" "mu-file"))
(def cancel-button (action-button "cancel-edit" "Cancel" "mu-cancel"))
(def add-button (action-button "add-contact" "Add" "mu-plus"))

(defn section-header [editing?]
  [:div {:class "section-header"}
    [:div {:class "level"}
      [:div {:class "level-left"}
        [:div {:class "level-item"}
          [:h1 {:class "subtitle"}
            [:span {:class "mu mu-user"}]
            "Edit Contact"]]]
      [:div {:class "level-right"}
        (if editing?
          [:div {:class "buttons"} cancel-button save-button]
          add-button)]]])
#+end_src
****** Rendering Contacts
#+begin_src clojure
(defn format-name [contact]                                ;; <1>
  (->> contact                                             ;; <2>
       ((juxt :first-name :last-name))                     ;; <3>
       (str/join " ")))

(defn delete-icon [idx]
  [:span {:class "delete-icon"
          :data-idx idx}
    [:span {:class "mu mu-delete"}]])

(defn render-contact-list-item [idx contact selected?]
  [:div {:class (str "card contact-summary" (when selected? " selected"))
         :data-idx idx}                                    ;; <4>
    [:div {:class "card-content"}
      [:div {:class "level"}
        [:div {:class "level-left"}
          [:div {:class "level-item"}
            (delete-icon idx)
            (format-name contact)]]
        [:div {:class "level-right"}
          [:span {:class "mu mu-right"}]]]]])

(defn render-contact-list [state]
  (let [{:keys [:contacts :selected]} state]
    [:div {:class "contact-list column is-4 hero is-fullheight"}
      (map-indexed (fn [idx contact]
                     (render-contact-list-item idx contact (= idx selected)))
                   contacts)]))

#+end_src
****** render-app!
#+begin_src clojure
(defn render-app! [state]
  (set-app-html!
    (hiccups/html
      [:div {:class "app-main"}
        top-bar
        [:div {:class "columns"}
          (render-contact-list state)
          [:div {:class "contact-details column is-8"}
            (section-header (:editing? state))
            [:div {:class "hero is-fullheight"}
              (if (:editing? state)
                (render-contact-details (get-in state [:contacts (:selected state)] {}))
                no-contact-details)]]]])))

#+end_src

***** Adding Interactions
****** on-open-contact
#+begin_src clojure
(defn on-open-contact [e state]
  (refresh!
    (let [idx (int (.. e -currentTarget -dataset -idx))]
      (assoc state :selected idx
                   :editing? true))))

(def no-contact-details   [:p {:class "notice"}    "No contact selected"])
#+end_src
****** adding or updating a contact
#+begin_src clojure
(defn get-field-value [id]
  (let [value (.-value (gdom/getElement id))]
    (when (not (empty? value)) value)))

(defn get-contact-form-data []
  {:first-name (get-field-value "input-first-name")
   :last-name (get-field-value "input-last-name")
   :email (get-field-value "input-email")
   :address {:street (get-field-value "input-street")
             :city (get-field-value "input-city")
             :state (get-field-value "input-state")
             :postal (get-field-value "input-postal")
             :country (get-field-value "input-country")}})

(defn on-save-contact [state]
  (refresh!
    (let [contact (get-contact-form-data)
          idx (:selected state)
          state (dissoc state :selected :editing?)]        ;; <1>
      (if idx
        (update state :contacts                            ;; <2>
                replace-contact idx contact)
        (update state :contacts
                add-contact contact)))))

(defn on-add-contact [state]
  (refresh! (-> state
                (assoc :editing? true)
                (dissoc :selected))))

(defn replace-contact [contact-list idx input]
  (assoc contact-list idx (make-contact input)))

(defn on-save-contact [state]
  (refresh!
    (let [contact (get-contact-form-data)
          idx (:selected state)
          state (dissoc state :selected :editing?)]
      (if idx
        (update state :contacts replace-contact idx contact)
        (update state :contacts add-contact contact)))))

(defn on-cancel-edit [state]
  (refresh! (dissoc state :selected :editing?)))

(defn on-delete-contact [e state]
  (.stopPropagation e)
  (let [idx (int (.. e -currentTarget -dataset -idx))]
    (refresh! (-> state
                  (update :contacts remove-contact idx)
                  (cond-> (= idx (:selected state))
                    (dissoc :selected :editing?))))))

#+end_src
****** attach-event-handlers!
#+begin_src clojure
(defn attach-event-handlers! [state]
  (doseq [elem (array-seq (gdom/getElementsByClass "contact-summary"))]
    (gevents/listen elem "click"
      (fn [e] (on-open-contact e state))))

  (doseq [elem (array-seq (gdom/getElementsByClass "delete-icon"))]
    (gevents/listen elem "click"
      (fn [e] (on-delete-contact e state))))

  (when-let [add-button (gdom/getElement "add-contact")]
    (gevents/listen add-button "click"
      (fn [_] (on-add-contact state))))

  (when-let [save-button (gdom/getElement "save-contact")]
    (gevents/listen save-button "click"
      (fn [_] (on-save-contact state))))

  (when-let [cancel-button (gdom/getElement "cancel-edit")]
    (gevents/listen cancel-button "click"
      (fn [_] (on-cancel-edit state)))))


#+end_src

***** refresh!
#+begin_src clojure 
(defn set-app-html! [html-str]
  (set! (.-innerHTML app-container) html-str))

(defn refresh! [state]                                     ;; <3>
  (render-app! state)
  (attach-event-handlers! state))

(refresh! initial-state)                                   ;; <4>
#+end_src
***** # after-load not use
#+begin_src clojure :tangle no 
(defn ^:after-load on-reload []
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
)
#+end_src
*** deps.edn
:PROPERTIES:
:header-args: :tangle  contacts/deps.edn
:END:
**** file
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/contacts/deps.edn
**** src
#+begin_src clojure
{:deps {org.clojure/clojure {:mvn/version "1.10.0"}
        org.clojure/clojurescript {:mvn/version "1.11.4"}
        hiccups/hiccups {:mvn/version "0.3.0"}}
 :paths ["src" "resources"]
 :aliases {:fig {:extra-deps
                 {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}
                  org.slf4j/slf4j-nop {:mvn/version "1.7.30"}
                  com.bhauman/figwheel-main {:mvn/version "0.2.17"}}
                 :extra-paths ["target" "test"]}
           :build {:main-opts ["-m" "figwheel.main" "-b" "dev" "-r"]}
           :min   {:main-opts ["-m" "figwheel.main" "-O" "advanced" "-bo" "dev"]}
           :test  {:main-opts ["-m" "figwheel.main" "-co" "test.cljs.edn" "-m" "learn-cljs.test-runner"]}}}
#+end_src
*** contacts_test.cljs
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/contacts/src/learn_cljs/contacts.cljs")
** Group Chat
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/Group-Chat-cljs-project.org")
** noter
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter/noter-cljs-project.org")
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter-cljs-project.org")
* project comands
:PROPERTIES:
:header-args: :tangle no
:END:
** save буфер фреймы проекта
#+begin_src emacs-lisp  :results output silent
(use-package burly
 :ensure t
 ;; :config
  )
;; (burly-bookmark-frames "weather buffers")
(bookmark-save nil "/home/buyn/temp/bookmarks")
(burly-bookmark-frames "buffers LAST SAVE")
(bookmark-save nil "/home/buyn/temp/bookmarks")
#+end_src
** save буфер фреймы clojure
#+begin_src emacs-lisp  :results output silent
(use-package burly
 :ensure t
 ;; :config
  )
;; (burly-bookmark-frames "weather buffers")
(bookmark-save nil "/home/buyn/temp/bookmarks")
(burly-bookmark-frames "buffers clojure")
(bookmark-save nil "/home/buyn/temp/bookmarks")
#+end_src
** new project
clj -X:new :template figwheel-main :name learn-cljs/weather :args '["+deps" "--reagent"]'
$ clj -X:new :template figwheel-main :name learn-cljs/weather :args 
** run console in org root
clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl
#+begin_src elisp :results output silent
(buyn-shell-start "konsole")
(evil-previous-line)
(org-cycle)
(delete-other-windows)
#+end_src

** repl
*** run eshell in org root
clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl
#+begin_src elisp :results output silent
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src

      ;; (execute-kbd-macro "A \C-m")
*** run repl
clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl
:cljs/quit
:cljs/restart
#+begin_src eshell
clj -m cljs.main --compile my-cljs-project.core --repl


#+end_src

#+RESULTS:
*** repl commands
:cljs/quit

** cider
If you have a Clojure project in your file system and want CIDER to launch an nREPL session for it, simply visit a file that belongs to the project, and type M-x cider-jack-in RET.[1] CIDER will start an nREPL server and automatically connect to it.
  In Clojure(Script) buffers the command cider-jack-in is bound to C-c C-x (C-)j (C-)j. 

** run console with command
#+begin_src elisp :results output silent
(buyn-shell-start "konsole -e /bin/bash --rcfile <(clj -M:dev)")
(evil-previous-line)
(org-cycle)
(delete-other-windows)
#+end_src

* get info
:PROPERTIES:
:header-args: :tangle no
:END:
** tree weather
#+begin_src eshell
tree -a ./weather/
#+end_src

#+RESULTS:
#+begin_example
./weather/
|-- .gitignore
|-- README.md
|-- deps.edn
|-- dev.cljs.edn
|-- figwheel-main.edn
|-- resources
|   `-- public
|       |-- css
|       |   `-- style.css
|       |-- index.html
|       `-- test.html
|-- src
|   `-- learn_cljs
|       `-- weather.cljs
|-- target
|   `-- public
|-- test
|   `-- learn_cljs
|       |-- test_runner.cljs
|       `-- weather_test.cljs
`-- test.cljs.edn

10 directories, 12 files
#+end_example

#+begin_src eshell
tree -a ../..
#+end_src

** tree
#+begin_src eshell
tree -a 
#+end_src

#+RESULTS:
#+begin_example
.
|-- .cpcache
|   |-- 2249099292.basis
|   |-- 2249099292.cp
|   |-- 2249099292.main
|   |-- 3387647126.basis
|   `-- 3387647126.cp
|-- .git
|   |-- COMMIT_EDITMSG
|   |-- HEAD
|   |-- branches
|   |-- config
|   |-- description
|   |-- hooks
|   |   |-- applypatch-msg.sample
|   |   |-- commit-msg.sample
|   |   |-- fsmonitor-watchman.sample
|   |   |-- post-update.sample
|   |   |-- pre-applypatch.sample
|   |   |-- pre-commit.sample
|   |   |-- pre-merge-commit.sample
|   |   |-- pre-push.sample
|   |   |-- pre-rebase.sample
|   |   |-- pre-receive.sample
|   |   |-- prepare-commit-msg.sample
|   |   |-- push-to-checkout.sample
|   |   |-- sendemail-validate.sample
|   |   `-- update.sample
|   |-- index
|   |-- info
|   |   `-- exclude
|   |-- logs
|   |   |-- HEAD
|   |   `-- refs
|   |       `-- heads
|   |           `-- master
|   |-- objects
|   |   |-- 0c
|   |   |   `-- bbd03849c4225b912c29c5cc1a1eb95e004406
|   |   |-- 0e
|   |   |   `-- 870ed249cff3194b020b449194b8cba79a49d3
|   |   |-- 17
|   |   |   `-- a3e74549f59d14a57aaa5d946f87798ecd2d27
|   |   |-- 1f
|   |   |   `-- 93999b09a0a7b82e830a7b9090f0551d0f280e
|   |   |-- 32
|   |   |   `-- 4d99a0a2eb602de5639061c10905a14f2ec25c
|   |   |-- 45
|   |   |   `-- 374bcfb2934e4cb107dd25d948d3b9a008f723
|   |   |-- 50
|   |   |   `-- 6579660ab72264aaa634f26bf26ae7ffbdc418
|   |   |-- 64
|   |   |   `-- 5a17d70fa7f64e2c3119372d253464688197af
|   |   |-- 65
|   |   |   `-- a5e52de8afa978f2bb081da49308b6cd34291d
|   |   |-- 68
|   |   |   `-- d8c0c529bb0772b6720ad9e763d778f384d54c
|   |   |-- 6a
|   |   |   `-- 3417b8d9d0a2fec34cf79ef2b46cc63a28b7d8
|   |   |-- 71
|   |   |   `-- 0abb86e53c60cd50c35ef8e3c3974ecd5a166c
|   |   |-- 78
|   |   |   `-- 57d22f338d2bf5a11f2c9989019274e89e11bf
|   |   |-- 8e
|   |   |   `-- 9d30e7d6e5c5c5cf8797dddb89c36afcd3ba53
|   |   |-- a4
|   |   |   `-- 5fa94e812daa483ce03c6d57b8406559ba308c
|   |   |-- a9
|   |   |   `-- 3c6e57355bd80bf964904be7322c2f011e0d22
|   |   |-- af
|   |   |   `-- 4f6bcd17f983891885b2da5bb50d94247eafde
|   |   |-- b5
|   |   |   `-- 37353beaf2793d612857b56c29e2c6bfc6f3bb
|   |   |-- bf
|   |   |   `-- 8bf5fb01b57c3c6914e97292b05eadeb0b78a6
|   |   |-- c0
|   |   |   `-- 75bf98b67f24573980200a3389426360f42eed
|   |   |-- c4
|   |   |   `-- 49315d9c35a5d2431f95a1d2d4e4831a3a00af
|   |   |-- cd
|   |   |   `-- fc3fe15c3684ed37efdd455b8de454e72d0ea0
|   |   |-- d5
|   |   |   `-- e6c53f1c5365bb3647bf2c492687effb1a4034
|   |   |-- de
|   |   |   `-- 743adcae8dd63e093efe46f514c7536e24752a
|   |   |-- ee
|   |   |   `-- d014ac3bfe7e79af47e2e71dbbb5348f55c8a3
|   |   |-- fb
|   |   |   `-- 9af43c306f53f296e24ec6309badfcf4e1345c
|   |   |-- info
|   |   `-- pack
|   `-- refs
|       |-- heads
|       |   `-- master
|       `-- tags
|-- .gitignore
|-- deps.edn
|-- index.html
|-- my-cljs-project.org
|-- out
|   |-- cljs
|   |   |-- core.cljs
|   |   |-- core.js
|   |   |-- core.js.map
|   |   |-- pprint.cljs
|   |   |-- pprint.cljs.cache.json
|   |   |-- pprint.js
|   |   |-- pprint.js.map
|   |   |-- repl.cljs
|   |   |-- repl.cljs.cache.json
|   |   |-- repl.js
|   |   |-- repl.js.map
|   |   `-- spec
|   |       |-- alpha.cljs
|   |       |-- alpha.cljs.cache.json
|   |       |-- alpha.js
|   |       |-- alpha.js.map
|   |       `-- gen
|   |           |-- alpha.cljs
|   |           |-- alpha.cljs.cache.json
|   |           |-- alpha.js
|   |           `-- alpha.js.map
|   |-- cljs_deps.js
|   |-- cljsc_opts.edn
|   |-- clojure
|   |   |-- browser
|   |   |   |-- event.cljs
|   |   |   |-- event.cljs.cache.json
|   |   |   |-- event.js
|   |   |   |-- event.js.map
|   |   |   |-- net.cljs
|   |   |   |-- net.cljs.cache.json
|   |   |   |-- net.js
|   |   |   |-- net.js.map
|   |   |   |-- repl
|   |   |   |   |-- preload.cljs
|   |   |   |   |-- preload.cljs.cache.json
|   |   |   |   |-- preload.js
|   |   |   |   `-- preload.js.map
|   |   |   |-- repl.cljs
|   |   |   |-- repl.cljs.cache.json
|   |   |   |-- repl.js
|   |   |   `-- repl.js.map
|   |   |-- string.cljs
|   |   |-- string.cljs.cache.json
|   |   |-- string.js
|   |   |-- string.js.map
|   |   |-- walk.cljs
|   |   |-- walk.cljs.cache.json
|   |   |-- walk.js
|   |   `-- walk.js.map
|   |-- goog
|   |   |-- array
|   |   |   `-- array.js
|   |   |-- asserts
|   |   |   `-- asserts.js
|   |   |-- async
|   |   |   |-- delay.js
|   |   |   |-- freelist.js
|   |   |   |-- nexttick.js
|   |   |   |-- run.js
|   |   |   `-- workqueue.js
|   |   |-- base.js
|   |   |-- debug
|   |   |   |-- debug.js
|   |   |   |-- entrypointregistry.js
|   |   |   |-- error.js
|   |   |   |-- errorcontext.js
|   |   |   |-- logbuffer.js
|   |   |   |-- logger.js
|   |   |   `-- logrecord.js
|   |   |-- deps.js
|   |   |-- disposable
|   |   |   |-- disposable.js
|   |   |   `-- idisposable.js
|   |   |-- dom
|   |   |   |-- asserts.js
|   |   |   |-- browserfeature.js
|   |   |   |-- dom.js
|   |   |   |-- htmlelement.js
|   |   |   |-- nodetype.js
|   |   |   |-- safe.js
|   |   |   |-- tagname.js
|   |   |   `-- tags.js
|   |   |-- events
|   |   |   |-- browserevent.js
|   |   |   |-- browserfeature.js
|   |   |   |-- event.js
|   |   |   |-- eventhandler.js
|   |   |   |-- eventid.js
|   |   |   |-- events.js
|   |   |   |-- eventtarget.js
|   |   |   |-- eventtype.js
|   |   |   |-- listenable.js
|   |   |   |-- listener.js
|   |   |   `-- listenermap.js
|   |   |-- fs
|   |   |   `-- url.js
|   |   |-- functions
|   |   |   `-- functions.js
|   |   |-- html
|   |   |   |-- legacyconversions.js
|   |   |   |-- safehtml.js
|   |   |   |-- safescript.js
|   |   |   |-- safestyle.js
|   |   |   |-- safestylesheet.js
|   |   |   |-- safeurl.js
|   |   |   |-- trustedresourceurl.js
|   |   |   |-- trustedtypes.js
|   |   |   `-- uncheckedconversions.js
|   |   |-- i18n
|   |   |   `-- bidi.js
|   |   |-- iter
|   |   |   `-- iter.js
|   |   |-- json
|   |   |   |-- hybrid.js
|   |   |   `-- json.js
|   |   |-- labs
|   |   |   `-- useragent
|   |   |       |-- browser.js
|   |   |       |-- engine.js
|   |   |       |-- platform.js
|   |   |       `-- util.js
|   |   |-- log
|   |   |   `-- log.js
|   |   |-- math
|   |   |   |-- coordinate.js
|   |   |   |-- integer.js
|   |   |   |-- long.js
|   |   |   |-- math.js
|   |   |   `-- size.js
|   |   |-- messaging
|   |   |   |-- abstractchannel.js
|   |   |   `-- messagechannel.js
|   |   |-- mochikit
|   |   |   `-- async
|   |   |       `-- deferred.js
|   |   |-- net
|   |   |   |-- errorcode.js
|   |   |   |-- eventtype.js
|   |   |   |-- httpstatus.js
|   |   |   |-- websocket.js
|   |   |   |-- wrapperxmlhttpfactory.js
|   |   |   |-- xhrio.js
|   |   |   |-- xhrlike.js
|   |   |   |-- xmlhttp.js
|   |   |   |-- xmlhttpfactory.js
|   |   |   `-- xpc
|   |   |       |-- crosspagechannel.js
|   |   |       |-- crosspagechannelrole.js
|   |   |       |-- directtransport.js
|   |   |       |-- nativemessagingtransport.js
|   |   |       |-- transport.js
|   |   |       `-- xpc.js
|   |   |-- object
|   |   |   `-- object.js
|   |   |-- promise
|   |   |   |-- promise.js
|   |   |   |-- resolver.js
|   |   |   `-- thenable.js
|   |   |-- reflect
|   |   |   `-- reflect.js
|   |   |-- string
|   |   |   |-- const.js
|   |   |   |-- internal.js
|   |   |   |-- string.js
|   |   |   |-- stringbuffer.js
|   |   |   |-- stringformat.js
|   |   |   `-- typedstring.js
|   |   |-- structs
|   |   |   |-- map.js
|   |   |   `-- structs.js
|   |   |-- timer
|   |   |   `-- timer.js
|   |   |-- uri
|   |   |   |-- uri.js
|   |   |   `-- utils.js
|   |   `-- useragent
|   |       |-- product.js
|   |       `-- useragent.js
|   |-- main.js
|   |-- my_cljs_project
|   |   |-- core.cljs
|   |   |-- core.cljs.cache.json
|   |   |-- core.js
|   |   `-- core.js.map
|   `-- process
|       |-- env.cljs
|       |-- env.cljs.cache.json
|       |-- env.js
|       `-- env.js.map
`-- src
    `-- my_cljs_project
        `-- core.cljs

83 directories, 211 files
#+end_example

#+begin_src eshell
tree -a ../..
#+end_src

* TODO todo
** DONE [[file:noter/noter-cljs-project.org::*начать вносить измения по книге][начать вносить измения по книге]]
** TODO [[file:noter/noter-cljs-project.org::*поэксперементировать с каналами][поэксперементировать с каналами]]
** [[file:noter/noter-cljs-project.org::*запустить собраное][запустить собраное]]
* arhiv
** DONE Осмотрет проект на котором остановился
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/group-chat/Group-Chat-cljs-project.org")
** DONE сделать папку
** DONE нету нечего кроме орга
** DONE сделать новый проект
[[file:~/Dropbox/orgs/org-Brain/ClojureScript Idioms.org::*new project][new project]]
clj -X:new :template figwheel-main :name learn-cljs/group-chat :args '["+deps" "--reagent"]'
из папки за пределам груп чата
возможно будет ошибка что папка уже существует
** DONE Исправить ошибку Танглинга
*** открыть настройки кложура
*** спросить ии
есть проблема при танглинге добовляются строки которые отсутсвую в сорблоке
*** group_chat.cljs
:PROPERTIES:
:header-args: :tangle  group-chat/src/learn_cljs/group_chat.cljs
:END:
*** file
(find-file-other-frame "./group-chat/src/learn_cljs/group_chat.cljs")
*** src core.cljs
**** ns
#+begin_src clojure :results output silent
(ns ^:figwheel-hooks learn-cljs.group-chat
  (:require
    [goog.dom :as gdom]
    [reagent.core :as reagent :refer [atom]]
    [reagent.dom :as rdom]))
#+end_src
**** println

(println "Test text")

#+begin_src clojure :results output silent

(println "This text is printed from src/learn_cljs/group_chat.cljs. Go ahead and edit it and see reloading in action.")
#+end_src
**** test
#+begin_src clojure :results output silent

(defn multiply [a b] (* a b))
#+end_src

**** defonce
#+begin_src clojure :results output silent

;; define your app data so that it doesn't get over-written on reload
(defonce app-state (atom {:text "Hello world!"}))
#+end_src

**** render
#+begin_src clojure :results output silent

(defn get-app-element []
  (gdom/getElement "app"))

(defn hello-world []
  [:div
   [:h1 (:text @app-state)]
   [:h3 "Edit this in src/learn_cljs/group_chat.cljs and watch it change!!"]])

(defn mount [el]
  (rdom/render [hello-world] el))

(defn mount-app-element []
  (when-let [el (get-app-element)]
    (mount el)))

;; conditionally start your application based on the presence of an "app" element
;; this is particularly helpful for testing this ns without launching the app
(mount-app-element)

;; specify reload hook with ^:after-load metadata
(defn ^:after-load on-reload []
  (mount-app-element)
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
  )
#+end_src
*** это танглется без изменений
*** но
*** state.cljs
:PROPERTIES:
:header-args: :tangle  group-chat/src/learn_cljs/chat/state.cljs
:END:
**** file
(find-file-other-frame "group-chat/src/learn_cljs/chat/state.cljs")
**** src
#+begin_src clojure
(ns learn-cljs.chat.state)

(def initial-state                                         ;; <1>
  {:rooms []
   :people []
   :messages []
   :current-user nil})

(defonce app-state (atom initial-state))                   ;; <2>

#+end_src
*** строки прерашаются в 
(prn (binding [*out* (java.io.StringWriter.)](ns learn-cljs.chat.state)

(def initial-state                                         ;; <1>
  {:rooms []
   :people []
   :messages []
   :current-user nil})

(defonce app-state (atom initial-state))                   ;; <2>))
*** вот мои настройки кложура в имаксе

(load (expand-file-name "INI/dev/clojure-cfg.el" user-emacs-directory))
*** src
#+begin_src elisp
;; * CLOJURE-MODE CUSTOMIZATION
;; --------------------------------------
;; ** clojure-mode
(use-package clojure-mode
  :defer t
  ;; :disabled
  :ensure t
  :config
 (setq clojure-indent-style 'align-arguments)
 (setq clojure-indent-keyword-style 'align-arguments)
  )
;; ** ob-clojur-mode
(use-package ob-clojure
  ;; :disabled
  :defer t
  ;; :ensure t
  :config
    (setq org-babel-clojure-backend 'cider)
  ;; (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  ;; (custom-theme-set-faces
  ;;  'material
  ;;  `(rainbow-delimiters-depth-1-face ((t
  ;;      (:foreground ,"aquamarine"))))
  ;;  )
  )
;; ** use-package cider:
(use-package cider
  :defer t
  :ensure t
  :after clojure-mode
  :config
  ;; (set-lookup-handlers! 'cider-mode nil) ; doom option 
  ;; (setq lsp-enable-completion-at-point nil) ; use cider completion
  (setq cider-eldoc-display-for-symbol-at-point nil) ; disable cider showing eldoc during symbol at point
  )

;; ** clj-refactor
(use-package clj-refactor
  :defer t
  :ensure t
  :after clojure-mode
  :config
  ;; (set-lookup-handlers! 'clj-refactor-mode nil) ; doom option 
  (setq cljr-add-ns-to-blank-clj-files nil) ; disable clj-refactor adding ns to blank files
  )
;; ** Leiningen

;; ** --------------------------------------
;; * LSP-MODE CUSTOMIZATION
;; --------------------------------------
;; ** use-package lsp-mode:
(use-package lsp-mode
  :defer t
  :ensure t
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook
  (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
    (clojure-mode-hook . lsp)
    (clojurescript-mode-hook . lsp)
    (clojurec-mode-hook . lsp)
    ;; (XXX-mode . lsp)
    ;; if you want which-key integration
    (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp
  :config
  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        treemacs-space-between-root-nodes nil
        company-minimum-prefix-length 1)
  )

;; ** use-package lsp-ui:
(use-package lsp-ui
  :defer t
  :ensure t
  :commands lsp-ui-mode)
;; ;; if you are helm user
;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
;; ** use-package lsp-ivy:
(use-package lsp-ivy
  :defer t
  :ensure t
  :commands lsp-ivy-workspace-symbol)
;; ** lsp-treemacs:
(use-package lsp-treemacs
  :disabled
  :defer t
  :ensure t
  :commands lsp-treemacs-errors-list)

;; ** --------------------------------------
;; * use-package dap-mode:
;; optionally if you want to use debugger
;; (use-package dap-mode)


;; (use-package dap-LANGUAGE) to load the dap adapter for your language
;; ** --------------------------------------
#+end_src

*** какие идеи?

*** 

*** 
Да это интересно наблюдение, но это пологаю ошибка\сиптом, а несама причина 
:results output silent
поскольку раньше тогово не было мне кажет это появилось после обновления емакса
и нет ты не правла :results silent
и :results none
не помагает и строки вставляются
возможно это более комплексная ошибка
*** разобратся с выполнением шел блока
может это ошибка с вязана с другой
если уменя блок назвать sh и cmd или eshell
то при создании новой строки внутри этого блока он пытается его выполнить
будто туда послали энтер
eshell
тоесть он это привратит
#+begin_src eshell
#+end_src
в это
#+begin_src eshell

Welcome to the Emacs shell

~/Dev/ClojureScript/tutorials/my-cljs-project $ 

#+end_src
как будто это не шелл блок а терменал
повторное нажатие новой строки в этом блоке

#+begin_src eshell


Welcome to the Emacs shell

~/Dev/ClojureScript/tutorials/my-cljs-project $ 

Welcome to the Emacs shell

~/Dev/ClojureScript/tutorials/my-cljs-project $ 
#+end_src

** DONE сделать структуру в орге
** DONE попровать запустить
** DONE поправить ошибку
Помоги поравить ошибку
*** clojure -M:fig:build

[Figwheel] Validating figwheel-main.edn
[Figwheel] figwheel-main.edn is valid \(ツ)/
[Figwheel] Compiling build dev to "target/public/cljs-out/dev-main.js"
[Figwheel] Failed to compile build dev in 1.394 seconds.
[Figwheel:WARNING] Compile Exception   src/learn_cljs/chat/message_bus.cljs   line:2  column:14

  No such namespace: cljs.core.async, could not locate cljs/core/async.cljs, cljs/core/async.cljc, or JavaScript source providing "cljs.core.async" in file src/learn_cljs/chat/message_bus.cljs

  1  (ns learn-cljs.chat.message-bus
  2    (:require [cljs.core.async :refer [go-loop pub sub chan <! put!]]))
                  ^---
  3  
  4  (def msg-ch (chan 1))                                      ;; <1>
  5  (def msg-bus (pub msg-ch ::type))                          ;; <2>
  6  
  7  (defn dispatch!                                            ;; <3>

[Figwheel:SEVERE] failed compiling file:src/learn_cljs/chat/message_bus.cljs
[Figwheel] Starting Server at http://localhost:9500
[Figwheel] Starting REPL
Prompt will show when REPL connects to evaluation environment (i.e. a REPL hosting webpage)
Figwheel Main Controls:
          (figwheel.main/stop-builds id ...)  ;; stops Figwheel autobuilder for ids
          (figwheel.main/start-builds id ...) ;; starts autobuilder focused on ids
          (figwheel.main/reset)               ;; stops, cleans, reloads config, and starts autobuilder
          (figwheel.main/build-once id ...)   ;; builds source one time
          (figwheel.main/clean id ...)        ;; deletes compiled cljs target files
          (figwheel.main/status)              ;; displays current state of system
Figwheel REPL Controls:
          (figwheel.repl/conns)               ;; displays the current connections
          (figwheel.repl/focus session-name)  ;; choose which session name to focus on
In the cljs.user ns, controls can be called without ns ie. (conns) instead of (figwheel.repl/conns)
    Docs: (doc function-name-here)
    Exit: :cljs/quit
 Results: Stored in vars *1, *2, *3, *e holds last exception object
WARNING: A restricted method in java.lang.System has been called
WARNING: java.lang.System::loadLibrary has been called by org.fusesource.hawtjni.runtime.Library in an unnamed module (file:/home/buyn/.m2/repository/org/fusesource/jansi/jansi/1.16/jansi-1.16.jar)
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
WARNING: Restricted methods will be blocked in a future release unless native access is enabled

[Rebel readline] Type :repl/help for online help info
Opening URL http://localhost:9500
~/Dev/ClojureScript/tutorials/my-cljs-project/group-chat [130] $ 
clojure -M:fig:build

[Figwheel] Validating figwheel-main.edn
[Figwheel] figwheel-main.edn is valid \(ツ)/
[Figwheel] Compiling build dev to "target/public/cljs-out/dev-main.js"
[Figwheel] Failed to compile build dev in 1.374 seconds.
[Figwheel:WARNING] Compile Exception   src/learn_cljs/chat/message_bus.cljs   line:2  column:14

  No such namespace: cljs.core.async, could not locate cljs/core/async.cljs, cljs/core/async.cljc, or JavaScript source providing "cljs.core.async" in file src/learn_cljs/chat/message_bus.cljs

  1  (ns learn-cljs.chat.message-bus
  2    (:require [cljs.core.async :refer [go-loop pub sub chan <! put!]]))
                  ^---
  3  
  4  (def msg-ch (chan 1))                                      ;; <1>
  5  (def msg-bus (pub msg-ch ::type))                          ;; <2>
  6  
  7  (defn dispatch!                                            ;; <3>

[Figwheel:SEVERE] failed compiling file:src/learn_cljs/chat/message_bus.cljs
[Figwheel] Starting Server at http://localhost:9500
[Figwheel] Starting REPL
Prompt will show when REPL connects to evaluation environment (i.e. a REPL hosting webpage)
Figwheel Main Controls:
          (figwheel.main/stop-builds id ...)  ;; stops Figwheel autobuilder for ids
          (figwheel.main/start-builds id ...) ;; starts autobuilder focused on ids
          (figwheel.main/reset)               ;; stops, cleans, reloads config, and starts autobuilder
          (figwheel.main/build-once id ...)   ;; builds source one time
          (figwheel.main/clean id ...)        ;; deletes compiled cljs target files
          (figwheel.main/status)              ;; displays current state of system
Figwheel REPL Controls:
          (figwheel.repl/conns)               ;; displays the current connections
          (figwheel.repl/focus session-name)  ;; choose which session name to focus on
In the cljs.user ns, controls can be called without ns ie. (conns) instead of (figwheel.repl/conns)
    Docs: (doc function-name-here)
    Exit: :cljs/quit
 Results: Stored in vars *1, *2, *3, *e holds last exception object
WARNING: A restricted method in java.lang.System has been called
WARNING: java.lang.System::loadLibrary has been called by org.fusesource.hawtjni.runtime.Library in an unnamed module (file:/home/buyn/.m2/repository/org/fusesource/jansi/jansi/1.16/jansi-1.16.jar)
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
WARNING: Restricted methods will be blocked in a future release unless native access is enabled

[Rebel readline] Type :repl/help for online help info
Opening URL http://localhost:9500
*** 
(find-file-other-frame "group-chat/deps.edn")
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/group-chat/deps.edn
*** src

#+begin_src clojure :no-expand t
{:deps {org.clojure/clojure {:mvn/version "1.12.0"}
        org.clojure/clojurescript {:mvn/version "1.11.132"}
        org.clojure/data.json {:mvn/version "2.5.1"}
        cljsjs/react {:mvn/version "18.3.1-1"}
        cljsjs/react-dom {:mvn/version "18.3.1-1"}
        org.clojure/core.async {:mvn/version "1.6.681"}
        reagent/reagent {:mvn/version "1.2.0" }}
 :paths ["src" "resources"]
 :aliases {:fig {:extra-deps
                 {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}
                  com.bhauman/figwheel-main {:mvn/version "0.2.20"}
                  org.slf4j/slf4j-nop {:mvn/version "2.0.16"}}
                 :extra-paths ["target" "test"]}
           :build {:main-opts ["-m" "figwheel.main" "-b" "dev" "-r"]}
           :clean {:main-opts ["-m" "figwheel.main" "--clean" "dev"]}
           :min   {:main-opts ["-m" "figwheel.main" "-O" "advanced" "-bo" "dev"]}
           :test  {:main-opts ["-m" "figwheel.main" "-co" "test.cljs.edn" "-m" "learn-cljs.test-runner"]}}}
#+end_src
** DONE внести первые измение
[[https://www.learn-clojurescript.com/section-4/lesson-26-capstone-4-group-chat/][Capstone 4 - Group Chat | Lesson 26 | Learn ClojureScript]]
** CANCELED сделать рабочую версию
[[https://www.learn-clojurescript.com/section-4/lesson-26-capstone-4-group-chat/][Capstone 4 - Group Chat | Lesson 26 | Learn ClojureScript]]
** CANCELED сделать оканчательную версию
[[https://www.learn-clojurescript.com/section-4/lesson-26-capstone-4-group-chat/][Capstone 4 - Group Chat | Lesson 26 | Learn ClojureScript]]
** DONE понять в чём разница
открыть в двух rangers
** DONE запустить програму из книги
CLOSED: [2025-05-01 Thu 19:05]
тоесть мз папкм книгии
** DONE как запустить репл
CLOSED: [2025-05-01 Thu 19:05]
** DONE add line for open console
CLOSED: [2024-08-14 Wed 09:18]
to projet root
** DONE eshell package for send rigeon to eshell
CLOSED: [2025-04-30 Wed 21:31]
** DONE auto save bookmarks
CLOSED: [2025-04-30 Wed 21:31]
** DONE geting error
CLOSED: [2024-08-18 Sun 11:11]
~/Dev/ClojureScript/tutorials/my-cljs-project $  clj -m cljs.main --compile my-cljs-project.core --repl
Please install rlwrap for command editing or use "clojure" instead.

* 2024-08-10
** Necroteuch.org : 
#+begin_src emacs-lisp  :results output silent tangle: no
(find-file-other-frame "~/Dropbox/orgs/capture/Necroteuch.org")
    #+end_src
** my-cljs-project.org
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/my-cljs-project.org")
