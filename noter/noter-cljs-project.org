:PROPERTIES:
:header-args: :tangle no :mkdirp yes :results output silent :no-expand t
:END:
* src files
** notes/
*** deps.edn
:PROPERTIES:
:header-args: :tangle  notes/deps.edn
:END:
**** file
(find-file-other-frame "notes/deps.edn")
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/notes/deps.edn
**** src
        ;; org.clojure/clojurescript {:mvn/version "1.10.773"}
#+begin_src clojure :no-expand t
{:deps {org.clojure/clojure {:mvn/version "1.12.0"}
        org.clojure/clojurescript {:mvn/version "1.11.132"}
        org.clojure/data.json {:mvn/version "2.5.1"}
        org.clojure/core.async {:mvn/version "1.3.610"}
        cljsjs/react {:mvn/version "18.3.1-1"}
        funcool/bide {:mvn/version "1.7.0"}
        camel-snake-kebab/camel-snake-kebab {:mvn/version "0.4.2"}
        cljsjs/react-dom {:mvn/version "18.3.1-1"}
        reagent/reagent {:mvn/version "1.2.0" }}
 :paths ["src" "resources"]
 :aliases {:fig {:extra-deps
                 {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}
                  com.bhauman/figwheel-main {:mvn/version "0.2.20"}
                  org.slf4j/slf4j-nop {:mvn/version "2.0.16"}}
                 :extra-paths ["target" "test"]}
           :build {:main-opts ["-m" "figwheel.main" "-b" "dev" "-r"]}
           :clean {:main-opts ["-m" "figwheel.main" "--clean" "dev"]}
           :min   {:main-opts ["-m" "figwheel.main" "-O" "advanced" "-bo" "dev"]}
           :test  {:main-opts ["-m" "figwheel.main" "-co" "test.cljs.edn" "-m" "learn-cljs.test-runner"]}}}
#+end_src

**** exempl
(find-file-other-frame "~/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/deps.edn")
*** notes.cljs
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes.cljs
:END:
**** file
(find-file-other-frame "notes/src/learn_cljs/notes.cljs")
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter/notes/src/learn_cljs/notes.cljs

**** src notes.cljs
***** ns
#+begin_src clojure :results output silent
(ns learn-cljs.notes
  (:require [learn-cljs.notes.ui.header :refer [header]]
            [learn-cljs.notes.ui.main :refer [main]]
            [learn-cljs.notes.ui.sidebar :refer [sidebar]]
            [learn-cljs.notes.ui.footer :refer [footer]]
            [reagent.dom :as rdom]
            [goog.dom :as gdom]))
#+end_src
***** println

(println "Test text")

#+begin_src clojure :results output silent

(println "This text is printed from src/learn_cljs/group_chat.cljs. Go ahead and edit it and see reloading in action.")
#+end_src
***** test
#+begin_src clojure :results output silent

(defn multiply [a b] (* a b))
#+end_src

***** defonce
#+begin_src clojure :results output silent

;; define your app data so that it doesn't get over-written on reload
(defonce app-state (atom {:text "Hello world!"}))
#+end_src

***** render
#+begin_src clojure :results output silent

(defn app []
  [:div.app
   [header]
   [main]
   [sidebar]
   [footer]])

(rdom/render
 [app]
 (gdom/getElement "app"))
#+end_src
**** CANCELED src core.cljs orig
#+begin_src clojure :tangle no
(ns ^:figwheel-hooks learn-cljs.notes
  (:require
   [goog.dom :as gdom]
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]))

(println "This text is printed from src/learn_cljs/group_chat.cljs. Go ahead and edit it and see reloading in action.")

(defn multiply [a b] (* a b))

;; define your app data so that it doesn't get over-written on reload
(defonce app-state (atom {:text "Hello world!"}))

(defn get-app-element []
  (gdom/getElement "app"))

(defn hello-world []
  [:div
   [:h1 (:text @app-state)]
   [:h3 "Edit this in src/learn_cljs/group_chat.cljs and watch it change!"]])

(defn mount [el]
  (rdom/render [hello-world] el))

(defn mount-app-element []
  (when-let [el (get-app-element)]
    (mount el)))

;; conditionally start your application based on the presence of an "app" element
;; this is particularly helpful for testing this ns without launching the app
(mount-app-element)

;; specify reload hook with ^:after-load metadata
(defn ^:after-load on-reload []
  (mount-app-element)
  ;; optionally touch your app-state to force rerendering depending on
  ;; your application
  ;; (swap! app-state update-in [:__figwheel_counter] inc)
)

#+end_src
**** repl
(ns ^:figwheel-hooks learn-cljs.group-chat

(in-ns 'import-fns.format)
(in-ns 'learn-cljs.group-chat)
*** messaging
**** .notes.events
***** file
(find-file-other-frame "notes/src/learn_cljs/notes/events.cljs")
***** src .notes.events
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/events.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.events)

(def listeners (atom []))                                  ;; <1>

(defn emit!                                                ;; <2>
  ([type] (emit! type nil))
  ([type payload]
   (doseq [listen-fn @listeners]
     (listen-fn type payload))))

(defn register-listener! [listen-fn]                       ;; <3>
  (swap! listeners conj listen-fn))

#+end_src

**** .notes.command
***** file
(find-file-other-frame "notes/src/learn_cljs/notes/command.cljs")
***** src command.cljs
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/command.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.command
  (:require [learn-cljs.notes.events :refer [emit!]]
            [learn-cljs.notes.routes :as routes]))


(defn handle-test-hello! [name]
  (println "Hello" name)                                   ;; <1>
  (emit! :test/greeting-dispatched {:name name}))          ;; <2>

(defn handle-navigate! [route-params]
  (routes/navigate! route-params))

(defn dispatch!
  ([command] (dispatch! command nil))
  ([command payload]
   (js/setTimeout                                          ;; <3>
     #(case command
        :test/hello (handle-test-hello! payload)
        :route/navigate (handle-navigate! payload)
        )

        (js/console.error (str "Error: unhandled command: " command)))
     0))

#+end_src

**** .notes.routes
***** file
(find-file-other-frame "notes/src/learn_cljs/notes/routes.cljs")
***** src .notes.events
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/routes.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.routes
  (:require [learn-cljs.notes.events :refer [emit!]]
            [bide.core :as bide]))

(defonce router                                            ;; <1>
  (bide/router [["/" :home]
                ["/notes/new" :create-note]
                ["/notes/:note-id" :edit-note]]))

(defn navigate! [route-params]                             ;; <2>
  (apply bide/navigate! router route-params))

(defn- on-navigate [name params query]                     ;; <3>
  (emit! :route/navigated [name params query]))

(defn initialize! []                                       ;; <4>
  (bide/start! router {:default :routes/home
                       :on-navigate on-navigate}))

#+end_src

**** .notes.event-handlers.routes
***** file
(find-file-other-frame "notes/src/learn_cljs/notes/event-handlers/routes.cljs")
***** src .notes.event-handlers.routes
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/event-handlers/routes.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.event-handlers.routes
  (:require [learn-cljs.notes.state :refer [register-handler!]]))

(register-handler!
 :route/navigated
 (fn [db route-params]
   (assoc db :current-route route-params)))
#+end_src

*** state
**** .notes.state
***** file
(find-file-other-frame "notes/src/learn_cljs/notes/state.cljs")
***** src .notes.state
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/state.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.state
  (:require [reagent.core :as r]
            [learn-cljs.notes.events :as events]))

(def initial-state
  {:current-route [:home]                                  ;; <1>
   :notifications {:messages []                            ;; <2>
                   :next-id 0}
   :data {:notes {}
          :tags {}}})

(defonce app (r/atom initial-state))

(def handlers (atom {}))

(defn register-handler! [event-type handler-fn]
  (swap! handlers assoc event-type handler-fn))

(events/register-listener!
 (fn [type payload]
   (when-let [handler-fn (get @handlers type)]
     (swap! app #(handler-fn  % payload)))))

#+end_src

*** UI
**** ui.header
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/ui/header.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.ui.header
  (:require [learn-cljs.notes.ui.common :refer [button]]))

(defn header []
  [:header.page-header
   [button "+ New Note"
     {:route-params [:create-note]                         ;; <1>
      :class "inverse"}]])

#+end_src
**** ui.main
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/ui/main.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.ui.main
  (:require [learn-cljs.notes.state :as state]
            [learn-cljs.notes.ui.views.home :refer [home]]))

(defn not-found []                                         ;; <1>
  [:section.hero
   [:h1.title "Page Not Found!"]])

(defn main []
  (let [[route params query] (:current-route @state/app)]  ;; <2>
    [:div.main
     (case route
       :home [home]
       [not-found])]))


#+end_src


**** ui.sidebar
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/ui/sidebar.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.ui.sidebar)

(defn sidebar []
  [:nav.sidebar])

#+end_src
**** ui.footer
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/ui/footer.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.ui.footer)

(defn footer []
  [:footer.footer "CLJS Notes"])

#+end_src
**** ui.common
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/ui/common.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.ui.common
  (:require [learn-cljs.notes.command :refer [dispatch!]]))

(defn handle-navigate [route-params]
  (fn [_]
    (dispatch! :route/navigate route-params)))

(defn button [text {:keys [route-params class]
                    :or {class ""}}]
  (println "from button def")
             [:button {:class (str "button " class)
                        :on-click (handle-navigate route-params)}
                    text])

#+end_src

*** views
**** ui.views.home
:PROPERTIES:
:header-args: :tangle  notes/src/learn_cljs/notes/ui/views/home.cljs :mkdirp yes
:END:
#+begin_src clojure :no-expand t
(ns learn-cljs.notes.ui.views.home)

(defn home []
  [:div.home.hero
   [:h1.title "Welcome to Notes"]
   [:h2.subtitle "Select a note or create a new one to get started."]])

#+end_src

*** resurses
**** css
***** src css
:PROPERTIES:
:header-args: :tangle  notes/resources/public/css/style.css :mkdirp yes
:END:
#+begin_src clojure :no-expand t
:root {
  --bg-dark: #312450;
  --bg-highlight: #483575;
}

html,
body {
  margin: 0;
  padding: 0;
}
.app {
  display: grid;
  grid-template-areas:
    "header header"
    "sidebar main"
    "footer main";
  grid-template-rows: 3em 1fr 2em;
  grid-template-columns: 20em 1fr;
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
}

.page-header,
.sidebar,
.main,
.footer {
  padding-left: 16px;
  padding-right: 8px;
}

.page-header {
  grid-area: header;
  background-color: var(--bg-highlight);
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 0 16px;
}

.sidebar {
  grid-area: sidebar;
  overflow-x: hidden;
  overflow-y: auto;
  color: #dddddd;

  background-color: var(--bg-dark);
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='250' height='30' viewBox='0 0 1000 120'%3E%3Cg fill='none' stroke='%23342654' stroke-width='10' %3E%3Cpath d='M-500 75c0 0 125-30 250-30S0 75 0 75s125 30 250 30s250-30 250-30s125-30 250-30s250 30 250 30s125 30 250 30s250-30 250-30'/%3E%3Cpath d='M-500 45c0 0 125-30 250-30S0 45 0 45s125 30 250 30s250-30 250-30s125-30 250-30s250 30 250 30s125 30 250 30s250-30 250-30'/%3E%3Cpath d='M-500 105c0 0 125-30 250-30S0 105 0 105s125 30 250 30s250-30 250-30s125-30 250-30s250 30 250 30s125 30 250 30s250-30 250-30'/%3E%3Cpath d='M-500 15c0 0 125-30 250-30S0 15 0 15s125 30 250 30s250-30 250-30s125-30 250-30s250 30 250 30s125 30 250 30s250-30 250-30'/%3E%3Cpath d='M-500-15c0 0 125-30 250-30S0-15 0-15s125 30 250 30s250-30 250-30s125-30 250-30s250 30 250 30s125 30 250 30s250-30 250-30'/%3E%3Cpath d='M-500 135c0 0 125-30 250-30S0 135 0 135s125 30 250 30s250-30 250-30s125-30 250-30s250 30 250 30s125 30 250 30s250-30 250-30'/%3E%3C/g%3E%3C/svg%3E");
}

.sidebar-content {
  display: flex;
  flex-direction: column;
  justify-content: center;
  min-height: 100%;
  padding: 2.5em;
}

.sidebar ul a {
  display: block;
  border: 0;
  outline: 0;
  color: rgba(255, 255, 255, 0.7);
  font-size: 0.7em;
  letter-spacing: 0.1em;
  text-decoration: none;
  position: relative;
  padding: 0.5em 0;
}

.sidebar nav a:before,
.sidebar nav a:after {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 0.2em;
  border-radius: 0.2em;
  content: "";
}

.sidebar nav a:before {
  background: #3c2c62;
}

.sidebar nav a:after {
  background-image: linear-gradient(to left, #5e42a6, #b74e91);
  transition: max-width 0.2s ease;
  max-width: 0;
}

.sidebar nav a.active,
.sidebar nav a:hover {
  color: rgba(255, 255, 255, 0.9);
}

.sidebar nav a.active:after,
.sidebar nav a:hover:after {
  max-width: 100%;
}

.sidebar nav a.active {
  color: #ffffff;
}

/* main area */

.main {
  grid-area: main;
  padding-top: 12px;
}

/* footer */

.footer {
  grid-area: footer;
  padding: 0.2em 2.5em;
  text-align: center;
  background-color: #483575;
  text-transform: uppercase;
  font-weight: bold;
  color: #fff;
}

/* notifications */

.messages {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 500;
  pointer-events: none;
}

.messages > * {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.messages .notification {
  position: relative;
  margin-top: 24px;
  width: 80%;
  max-width: 600px;
  padding: 16px;
  border-radius: 12px;
  min-height: 32px;
  background-color: #fff;
  pointer-events: auto;
}

.notification > .delete {
  right: 0.5rem;
  position: absolute;
  top: 0.5rem;

  background-color: rgba(10, 10, 10, 0.2);
  border: none;
  border-radius: 290486px;
  cursor: pointer;
  pointer-events: auto;
  display: inline-block;
  flex-grow: 0;
  flex-shrink: 0;
  font-size: 0;
  height: 20px;
  max-height: 20px;
  max-width: 20px;
  min-height: 20px;
  min-width: 20px;
  outline: 0;
  vertical-align: top;
  width: 20px;
}

.notification > .delete::before,
.notification > .delete::after {
  background-color: #fff;
  content: "";
  display: block;
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translateX(-50%) translateY(-50%) rotate(45deg);
  transform-origin: center center;
}

.notification > .delete::before {
  height: 2px;
  width: 50%;
}

.notification > .delete::after {
  height: 50%;
  width: 2px;
}

.notification.is-error {
  background-color: #dc143c;
  color: #fff;
}

.notification.is-info {
  background-color: #483575;
  color: #fff;
}

/* full-height hero */

.hero {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

/* title */

.title {
  color: var(--bg-dark);
  opacity: 0.8;
}

.subtitle {
  color: var(--bg-highlight);
  opacity: 0.8;
}

.page-title {
  color: var(--bg-dark);
  opacity: 0.8;
  border-bottom: 2px solid var(--bg-dark);
  margin-bottom: 16px;
}

/* buttons */

.button {
  display: inline-block;
  border: 2px solid var(--bg-dark);
  padding: 4px 8px;
  color: var(--bg-dark);
  background-color: #fff;
  outline: none;
  cursor: pointer;
}

.button.inverse {
  border-color: #fff;
  color: #fff;
  background-color: var(--bg-highlight);
}

.button:hover {
  border-color: var(--bg-highlight);
  color: var(--bg-highlight);
  background-color: #fff;
}

.button.block {
  border-radius: 0;
  width: 100%;
  display: inline-block;
}

/* forms */

.field {
  margin-bottom: 12px;
}

.field:last-child {
  margin-bottom: 0;
}

.field > .label {
  font-size: 0.8em;
  font-weight: 700;
  color: #555;
  letter-spacing: 0.05em;
}

.field > .control input,
.field > .control textarea {
  width: 100%;
  border-radius: 4px;
  border: 1px solid #bbb;
  padding: 8px;
}

.note-form .editor {
  display: flex;
}

.note-form .editor .note {
  flex-grow: 1;
}

.note-form .editor .tags {
  flex-basis: 30%;
  margin-left: 24px;
}

.note-form .editor .tags > h3 {
  font-size: 1.1em;
  font-weight: 700;
  color: #555;
  letter-spacing: 0.05em;
}

/* tags */

.tag-selector .attached,
.tag-selector .available,
.tag-selector .create {
  margin-top: 16px;
}

.tag-selector .attached .tag {
  padding: 2px 8px;
  margin-right: 4px;
  background-color: var(--bg-highlight);
  color: #fff;
  font-weight: 500;
  cursor: pointer;
}

.tag-selector .available .tag {
  padding: 2px 8px;
  border-left: 4px solid var(--bg-dark);
  margin-bottom: 4px;
  cursor: pointer;
}

.tag-selector .available .tag:hover {
  border-left-color: #b74e91;
}

.tag-selector .available .tag .add {
  margin-right: 8px;
  font-weight: 800;
}

/* slide-in animation */

:root {
  --anim-duration: 500ms;
}

.slide-in {
  transition: transform var(--anim-duration) ease-in-out;
}

.slide-in.transition-initial.direction-left {
  transform: translateX(-100vw);
}

.slide-in.transition-initial.direction-right {
  transform: translateX(100vw);
}

.slide-in.transition-initial.direction-top {
  transform: translateY(-100vh);
}

.slide-in.transition-initial.direction-bottom {
  transform: translateY(100vh);
}

.slide-in.transition-triggered {
  transform: translate(0) !important;
}

/* Style reset adapted from Bulma */

html {
  background-color: #fff;
  font-size: 16px;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  min-width: 300px;
  overflow-x: hidden;
  overflow-y: hidden;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;
}

body {
  color: #4a4a4a;
  font-size: 1em;
  font-weight: 400;
  line-height: 1.5;

  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

body,
button,
input,
select,
textarea {
  font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Fira Sans", "Droid Sans", "Helvetica Neue", Helvetica,
    Arial, sans-serif;
}

blockquote,
body,
dd,
dl,
dt,
fieldset,
figure,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
html,
iframe,
legend,
li,
ol,
p,
pre,
textarea,
ul {
  margin: 0;
  padding: 0;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

a {
  color: #3273dc;
  cursor: pointer;
  text-decoration: none;
}

article,
aside,
figure,
footer,
header,
hgroup,
section {
  display: block;
}

*,
::after,
::before {
  box-sizing: inherit;
}

#+end_src
***** exempl
/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/resources/public/css/style.css
/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/resources/public/css/
*** tests
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter/notes/dev.cljs.edn")
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter/notes/dev.cljs.edn
/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter/notes/test.cljs.edn


[Figwheel:WARNING] Could not Analyze: Invalid :refer,
var learn-cljs.notes/multiply does not exist in file /home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter/notes/test/learn_cljs/notes_test.cljs  target/public/cljs-out/dev/generated-input-files/gen_test_runner.cljs   
[Figwheel:SEVERE] failed compiling file:target/public/cljs-out/dev/generated-input-files/gen_test_runner.cljs
** notes-backend/
* all
** exempls files
/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/ /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes-backend/ /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/deploy-image.sh /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/Dockerfile

/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/resources /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/test /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/deps.edn /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/dev.cljs.edn /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/figwheel-main.edn /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/README.md /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/test.cljs.edn

/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/event_handlers/ /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/ /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/api.cljs

(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/command.cljs")

/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/errors.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/events.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/routes.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/state.cljs


/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/event_handlers/api_data.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/event_handlers/core.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/event_handlers/header.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/event_handlers/notifications.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/event_handlers/routes.cljs

/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/views/ /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/animation.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/card.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/common.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/footer.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/header.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/main.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/notifications.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/sidebar.cljs /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/src/learn_cljs/notes/ui/tags.cljs
** poject exampls
*** notes
**** dir
/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/
**** console
#+begin_src elisp :results output silent :dir /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/
(buyn-shell-start "konsole -e /bin/bash --rcfile <(clj -M:fig:build)")
(evil-previous-line)
(org-cycle)
(delete-other-windows)
#+end_src
*** notes-backend
/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes-backend/ 
*** ranger
(ranger "/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/")
** Exempl dirs
/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-26/chat /home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-26/chat-backend
* REPL
:PROPERTIES:
:header-args: :tangle no :mkdirp yes :results output silent :no-expand t
:END:
** start
clojure -M:fig:build
#+begin_src elisp :results output silent :dir ./notes/
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src
** commans
clojure -M:fig:build
:cljs/quit
:cljs/restart

clojure -M:fig:clean
clojure -M:fig:build
** normilise
*** notes

{:notes                                                    ;; <1>
   {1 {:id 1
       :title "Books to Read"
       :content "..."}
    2 {:id 2
       :title "Groceries"
       :content "..."}}
 :tags
   {1 {:id 1 :name "food"}
    2 {:id 2 :name "list"}
    3 {:id 3 :name "reading"}}}

 :notes-tags
   {:by-note-id                                            ;; <2>
     {1 [2 3]
      2 [1 2]}
    :by-tag-id
     {1 [2]
      2 [1 2]
      3 [1]}}}

*** def notes
(def date-items
  {:notes                                                    ;; <1>
    {1 {:id 1
        :title "Books to Read"
        :content "..."}
      2 {:id 2
        :title "Groceries"
        :content "..."}}
  :tags
    {1 {:id 1 :name "food"}
      2 {:id 2 :name "list"}
      3 {:id 3 :name "reading"}}

  :notes-tags
    {:by-note-id                                            ;; <2>
      {1 [2 3]
        2 [1 2]}
      :by-tag-id
      {1 [2]
        2 [1 2]
        3 [1]}}})
*** first
(def items [{:id 1 :title "foo"}
                        {:id 2 :title "bar"}])

(def links [{:note-id 1 :tag-id 2}
            {:note-id 1 :tag-id 3}
            {:note-id 2 :tag-id 1}
            {:note-id 2 :tag-id 2}])

(defn map-values [f m]
  (into {} (for [[k v] m] [k (f v)])))

(defn make-index [coll & {:keys [index-fn value-fn group-fn]
                          :or {value-fn identity
                               group-fn identity}}]
                (->> coll
                    (group-by index-fn)
                    (map-values #(group-fn (mapv value-fn %)))))
*** test
(group-by :id items)

(make-index items
            :index-fn :id
            :group-fn first)

(make-index links
            :index-fn :note-id
            :value-fn :tag-id)
*** ии       
(make-index items
            :index-fn :id
            :group-fn first)

(make-index links
            :index-fn :note-id
            :value-fn :tag-id)
  новерное всеровно не понимаю вот два приминения в каждом из которых передаётся только один из необезательных параметров
  так чему же равен второй врезультате, при исполнении функции?

(def items [{:id 1 :title "foo"}
                        {:id 2 :title "bar"}])

(def links [{:note-id 1 :tag-id 2}
            {:note-id 1 :tag-id 3}
            {:note-id 2 :tag-id 1}
            {:note-id 2 :tag-id 2}])
*** end

(defn get-links [notes]
  (mapcat (fn [note]
            (for [tag (:tags note)]
              {:note-id (:id note)
               :tag-id (:id tag)}))
          notes))

(defn normalize-notes [notes]
  (let [links (get-links notes)
        notes-without-tags (mapv #(dissoc % :tags) notes)
        all-note-tags (mapcat :tags notes)]
    {:notes (make-index notes-without-tags
                        :index-fn :id
                        :group-fn first)
     :tags (make-index all-note-tags
                       :index-fn :id
                       :group-fn first)
     :notes-tags
     {:by-note-id
      (make-index links
                  :index-fn :note-id
                  :value-fn :tag-id)
      :by-tag-id
      (make-index links
                  :index-fn :tag-id
                  :value-fn :note-id)}}))
*** test
date-items
(:notes date-items)

(get-links (:notes date-items))
(get-links date-items)
(:tags date-items)
(for [tag (:tags date-items)]
              {:note-id (:id date-items)
               :tag-id (:id tag)})


(normalize-notes (:notes date-items))
** DONE masseging
*** DONE .notes.events
(ns learn-cljs.notes.events)

(def listeners (atom []))                                  ;; <1>

(defn emit!                                                ;; <2>
  ([type] (emit! type nil))
  ([type payload]
   (doseq [listen-fn @listeners]
     (listen-fn type payload))))

(defn register-listener! [listen-fn]                       ;; <3>
  (swap! listeners conj listen-fn))

*** DONE .notes.command

(ns learn-cljs.notes.command
  (:require [learn-cljs.notes.events :refer [emit!]
            [learn-cljs.notes.routes :as routes]]))


(defn handle-test-hello! [name]
  (println "Hello" name)                                   ;; <1>
  (emit! :test/greeting-dispatched {:name name}))          ;; <2>

(defn handle-navigate! [route-params]
  (routes/navigate! route-params))

(defn dispatch!
  ([command] (dispatch! command nil))
  ([command payload]
   (js/setTimeout                                          ;; <3>
     #(case command
        :test/hello (handle-test-hello! payload)
        :route/navigate (handle-navigate! payload))

        (js/console.error (str "Error: unhandled command: " command)))
     0)))
**** add
(ns learn-cljs.notes.command
  (:require ;; ...
            [learn-cljs.notes.routes :as routes]))

(defn handle-navigate! [route-params]
  (routes/navigate! route-params))
;; ...

(defn dispatch
  ;;...
  :route/navigate (handle-navigate! payload))

**** test
# (require '[learn-cljs.notes.routes :as routes]))

(defn handle-navigate! [route-params]
  (navigate! route-params))

(defn dispatch
  :navigate (handle-navigate! payload))
*** DONE notes.state
**** ns
(ns learn-cljs.notes.state
  (:require [reagent.core :as r]))
(require '[reagent.core :as r])

(def initial-state
  {:current-route [:home]                                  ;; <1>
   :notifications {:messages []                            ;; <2>
                   :next-id 0}
   :data {:notes {}
          :tags {}}})

(defonce app (r/atom initial-state))
**** handlers
(def handlers (atom {}))

(defn register-handler! [event-type handler-fn]
  (swap! handlers assoc event-type handler-fn))

(register-listener!
 (fn [type payload]
   (when-let [handler-fn (get @handlers type)]
     (swap! app #(handler-fn  % payload)))))

*** test

(defn caller-hello! [type payload]
  (println "hadler call " type payload))

(register-listener! caller-hello!)

(dispatch! :test/hello "world")

@listeners
@app
(dispatch! :test/helo)
** UI
*** DONE main notes
**** ns
(ns learn-cljs.notes
  (:require [learn-cljs.notes.ui.header :refer [header]]
            [learn-cljs.notes.ui.main :refer [main]]
            [learn-cljs.notes.ui.sidebar :refer [sidebar]]
            [learn-cljs.notes.ui.footer :refer [footer]]
            [reagent.dom :as rdom]
            [goog.dom :as gdom]))

(require '[learn-cljs.notes.ui.header :refer [header]]
          '[learn-cljs.notes.ui.main :refer [main]]
          '[learn-cljs.notes.ui.sidebar :refer [sidebar]]
          '[learn-cljs.notes.ui.footer :refer [footer]]
          '[reagent.dom :as rdom]
          '[goog.dom :as gdom])

(require 
          '[reagent.dom :as rdom]
          '[goog.dom :as gdom])
**** render
(defn app []
  [:div.app
   [header]
   [main]
   [sidebar]
   [footer]])

(rdom/render
 [app]
 (gdom/getElement "app"))
**** test
(defn app []
  [:div.app
   [:p "hi!"]
   ])

(rdom/render
 [app]
 (gdom/getElement "app"))
*** DONE header
(ns learn-cljs.notes.ui.header)

(defn header []
  [:header.page-header])
*** DONE ui.main
(ns learn-cljs.notes.ui.main)

(defn main []
  [:div.main])
*** DONE sidebar
(ns learn-cljs.notes.ui.sidebar)

(defn sidebar []
  [:nav.sidebar])
*** DONE footer
(ns learn-cljs.notes.ui.footer)

(defn footer []
  [:footer.footer "CLJS Notes"])
*** TODO [button]
**** DONE ui.common
(ns learn-cljs.notes.ui.common
  (:require [learn-cljs.notes.command :refer [dispatch!]]))

(defn handle-navigate [route-params]
  (fn [_]
    (dispatch! :route/navigate route-params)))

(defn button [text {:keys [route-params class]
                    :or {class ""}}]
  [:button {:class (str "button " class)
            :on-click (handle-navigate route-params)}
   text])

**** DONE ui.header
(ns learn-cljs.notes.ui.header
  (require [learn-cljs.notes.ui.common :refer [button]]))

(defn header []
  [:header.page-header
   [button "+ New Note"
     {:route-params [:create-note]                         ;; <1>
      :class "inverse"}]])
**** DONE views.home
(ns learn-cljs.notes.ui.views.home)

(defn home []
  [:div.home.hero
   [:h1.title "Welcome to Notes"]
   [:h2.subtitle "Select a note or create a new one to get started."]])

**** DONE ui.main

(ns learn-cljs.notes.ui.main
  (:require [learn-cljs.notes.state :as state]
            [learn-cljs.notes.ui.views.home :refer [home]]))

(defn not-found []                                         ;; <1>
  [:section.hero
   [:h1.title "Page Not Found!"]])

(defn main []
  (let [[route params query] (:current-route @state/app)]  ;; <2>
    [:div.main
     (case route
       :home [home]
       [not-found])]))

**** DONE notes.routes
***** test
(require '[learn-cljs.notes.events :refer [emit!]]
         '[bide.core :as bide])
***** all
(ns learn-cljs.notes.routes
  (:require [learn-cljs.notes.events :refer [emit!]]
            [bide.core :as bide]))

(defonce router                                            ;; <1>
  (bide/router [["/" :home]
                ["/notes/new" :create-note]
                ["/notes/:note-id" :edit-note]]))

(defn navigate! [route-params]                             ;; <2>
  (apply bide/navigate! router route-params))

(defn- on-navigate [name params query]                     ;; <3>
  (emit! :route/navigated [name params query]))

(defn initialize! []                                       ;; <4>
  (bide/start! router {:default :routes/home
                       :on-navigate on-navigate}))

**** event-handlers.routes
(ns learn-cljs.notes.event-handlers.routes
  (:require [learn-cljs.notes.state :refer [register-handler!]]))

(register-handler!
 :route/navigated
 (fn [db route-params]
   (assoc db :current-route route-params)))

* project comands
:PROPERTIES:
:header-args: :tangle no
:END:
** repl
*** run eshell in project root
clojure -M:fig:build
:cljs/quit
:cljs/restart

clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl


clojure -P
clojure -M:fig:clean
clojure -M:fig:build

#+begin_src elisp :results output silent :dir ./notes/
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src

      ;; (execute-kbd-macro "A \C-m")
*** run eshell in org root
clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl
#+begin_src elisp :results output silent
(evil-previous-line)
(org-cycle)
(delete-other-windows)
(let (buffer-name-to-close (buffer-name))
        (evil-window-split)
        (eshell)
        (evil-quit)
        (switch-to-buffer-other-frame buffer-name-to-close))
#+end_src

      ;; (execute-kbd-macro "A \C-m")
*** run repl
clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl

clojure -M:fig:build
:cljs/quit
:cljs/restart
#+begin_src eshell
clj -m cljs.main --compile my-cljs-project.core --repl


#+end_src

#+RESULTS:
*** repl commands
:cljs/quit
*** repl test
(js/alert "Am I connected?")
** new project
clj -X:new :template figwheel-main :name learn-cljs/notes :args '["+deps" "--reagent"]'

{:deps {org.clojure/clojure {:mvn/version "1.10.0"}
        org.clojure/clojurescript {:mvn/version "1.10.773"}
        reagent/reagent {:mvn/version "1.0.0"}
        funcool/bide {:mvn/version "1.6.0"}
        camel-snake-kebab/camel-snake-kebab {:mvn/version "0.4.2"}}

$ clj -X:new :template figwheel-main :name learn-cljs/weather :args 
[[file:~/Dropbox/orgs/org-Brain/ClojureScript Idioms.org::*2025-09-04T11:12:30+03:00][2025-09-04T11:12:30+03:00]]
** cider
If you have a Clojure project in your file system and want CIDER to launch an nREPL session for it, simply visit a file that belongs to the project, and type M-x cider-jack-in RET.[1] CIDER will start an nREPL server and automatically connect to it.
  In Clojure(Script) buffers the command cider-jack-in is bound to C-c C-x (C-)j (C-)j. 

** console
*** run console in org root
clj -M:dev
clojure -m cljs.main --compile my-cljs-project.core --repl
#+begin_src elisp :results output silent
(buyn-shell-start "konsole")
(evil-previous-line)
(org-cycle)
(delete-other-windows)
#+end_src

*** run console with command
#+begin_src elisp :results output silent
(buyn-shell-start "konsole -e /bin/bash --rcfile <(clj -M:dev)")
(evil-previous-line)
(org-cycle)
(delete-other-windows)
#+end_src

* get info
:PROPERTIES:
:header-args: :tangle no
:END:
** tree group-chat
#+begin_src eshell
tree -a ./noter/
#+end_src

#+RESULTS:
: ./noter/  [error opening dir]
: 
: 0 directories, 0 files

#+begin_src eshell
tree -a ../..
#+end_src

** tree
#+begin_src eshell
tree -a 
#+end_src

#+RESULTS:
#+begin_example
.
|-- .cpcache
|   |-- 2249099292.basis
|   |-- 2249099292.cp
|   |-- 2249099292.main
|   |-- 3387647126.basis
|   `-- 3387647126.cp
|-- .git
|   |-- COMMIT_EDITMSG
|   |-- HEAD
|   |-- branches
|   |-- config
|   |-- description
|   |-- hooks
|   |   |-- applypatch-msg.sample
|   |   |-- commit-msg.sample
|   |   |-- fsmonitor-watchman.sample
|   |   |-- post-update.sample
|   |   |-- pre-applypatch.sample
|   |   |-- pre-commit.sample
|   |   |-- pre-merge-commit.sample
|   |   |-- pre-push.sample
|   |   |-- pre-rebase.sample
|   |   |-- pre-receive.sample
|   |   |-- prepare-commit-msg.sample
|   |   |-- push-to-checkout.sample
|   |   |-- sendemail-validate.sample
|   |   `-- update.sample
|   |-- index
|   |-- info
|   |   `-- exclude
|   |-- logs
|   |   |-- HEAD
|   |   `-- refs
|   |       `-- heads
|   |           `-- master
|   |-- objects
|   |   |-- 0c
|   |   |   `-- bbd03849c4225b912c29c5cc1a1eb95e004406
|   |   |-- 0e
|   |   |   `-- 870ed249cff3194b020b449194b8cba79a49d3
|   |   |-- 17
|   |   |   `-- a3e74549f59d14a57aaa5d946f87798ecd2d27
|   |   |-- 1f
|   |   |   `-- 93999b09a0a7b82e830a7b9090f0551d0f280e
|   |   |-- 32
|   |   |   `-- 4d99a0a2eb602de5639061c10905a14f2ec25c
|   |   |-- 45
|   |   |   `-- 374bcfb2934e4cb107dd25d948d3b9a008f723
|   |   |-- 50
|   |   |   `-- 6579660ab72264aaa634f26bf26ae7ffbdc418
|   |   |-- 64
|   |   |   `-- 5a17d70fa7f64e2c3119372d253464688197af
|   |   |-- 65
|   |   |   `-- a5e52de8afa978f2bb081da49308b6cd34291d
|   |   |-- 68
|   |   |   `-- d8c0c529bb0772b6720ad9e763d778f384d54c
|   |   |-- 6a
|   |   |   `-- 3417b8d9d0a2fec34cf79ef2b46cc63a28b7d8
|   |   |-- 71
|   |   |   `-- 0abb86e53c60cd50c35ef8e3c3974ecd5a166c
|   |   |-- 78
|   |   |   `-- 57d22f338d2bf5a11f2c9989019274e89e11bf
|   |   |-- 8e
|   |   |   `-- 9d30e7d6e5c5c5cf8797dddb89c36afcd3ba53
|   |   |-- a4
|   |   |   `-- 5fa94e812daa483ce03c6d57b8406559ba308c
|   |   |-- a9
|   |   |   `-- 3c6e57355bd80bf964904be7322c2f011e0d22
|   |   |-- af
|   |   |   `-- 4f6bcd17f983891885b2da5bb50d94247eafde
|   |   |-- b5
|   |   |   `-- 37353beaf2793d612857b56c29e2c6bfc6f3bb
|   |   |-- bf
|   |   |   `-- 8bf5fb01b57c3c6914e97292b05eadeb0b78a6
|   |   |-- c0
|   |   |   `-- 75bf98b67f24573980200a3389426360f42eed
|   |   |-- c4
|   |   |   `-- 49315d9c35a5d2431f95a1d2d4e4831a3a00af
|   |   |-- cd
|   |   |   `-- fc3fe15c3684ed37efdd455b8de454e72d0ea0
|   |   |-- d5
|   |   |   `-- e6c53f1c5365bb3647bf2c492687effb1a4034
|   |   |-- de
|   |   |   `-- 743adcae8dd63e093efe46f514c7536e24752a
|   |   |-- ee
|   |   |   `-- d014ac3bfe7e79af47e2e71dbbb5348f55c8a3
|   |   |-- fb
|   |   |   `-- 9af43c306f53f296e24ec6309badfcf4e1345c
|   |   |-- info
|   |   `-- pack
|   `-- refs
|       |-- heads
|       |   `-- master
|       `-- tags
|-- .gitignore
|-- deps.edn
|-- index.html
|-- my-cljs-project.org
|-- out
|   |-- cljs
|   |   |-- core.cljs
|   |   |-- core.js
|   |   |-- core.js.map
|   |   |-- pprint.cljs
|   |   |-- pprint.cljs.cache.json
|   |   |-- pprint.js
|   |   |-- pprint.js.map
|   |   |-- repl.cljs
|   |   |-- repl.cljs.cache.json
|   |   |-- repl.js
|   |   |-- repl.js.map
|   |   `-- spec
|   |       |-- alpha.cljs
|   |       |-- alpha.cljs.cache.json
|   |       |-- alpha.js
|   |       |-- alpha.js.map
|   |       `-- gen
|   |           |-- alpha.cljs
|   |           |-- alpha.cljs.cache.json
|   |           |-- alpha.js
|   |           `-- alpha.js.map
|   |-- cljs_deps.js
|   |-- cljsc_opts.edn
|   |-- clojure
|   |   |-- browser
|   |   |   |-- event.cljs
|   |   |   |-- event.cljs.cache.json
|   |   |   |-- event.js
|   |   |   |-- event.js.map
|   |   |   |-- net.cljs
|   |   |   |-- net.cljs.cache.json
|   |   |   |-- net.js
|   |   |   |-- net.js.map
|   |   |   |-- repl
|   |   |   |   |-- preload.cljs
|   |   |   |   |-- preload.cljs.cache.json
|   |   |   |   |-- preload.js
|   |   |   |   `-- preload.js.map
|   |   |   |-- repl.cljs
|   |   |   |-- repl.cljs.cache.json
|   |   |   |-- repl.js
|   |   |   `-- repl.js.map
|   |   |-- string.cljs
|   |   |-- string.cljs.cache.json
|   |   |-- string.js
|   |   |-- string.js.map
|   |   |-- walk.cljs
|   |   |-- walk.cljs.cache.json
|   |   |-- walk.js
|   |   `-- walk.js.map
|   |-- goog
|   |   |-- array
|   |   |   `-- array.js
|   |   |-- asserts
|   |   |   `-- asserts.js
|   |   |-- async
|   |   |   |-- delay.js
|   |   |   |-- freelist.js
|   |   |   |-- nexttick.js
|   |   |   |-- run.js
|   |   |   `-- workqueue.js
|   |   |-- base.js
|   |   |-- debug
|   |   |   |-- debug.js
|   |   |   |-- entrypointregistry.js
|   |   |   |-- error.js
|   |   |   |-- errorcontext.js
|   |   |   |-- logbuffer.js
|   |   |   |-- logger.js
|   |   |   `-- logrecord.js
|   |   |-- deps.js
|   |   |-- disposable
|   |   |   |-- disposable.js
|   |   |   `-- idisposable.js
|   |   |-- dom
|   |   |   |-- asserts.js
|   |   |   |-- browserfeature.js
|   |   |   |-- dom.js
|   |   |   |-- htmlelement.js
|   |   |   |-- nodetype.js
|   |   |   |-- safe.js
|   |   |   |-- tagname.js
|   |   |   `-- tags.js
|   |   |-- events
|   |   |   |-- browserevent.js
|   |   |   |-- browserfeature.js
|   |   |   |-- event.js
|   |   |   |-- eventhandler.js
|   |   |   |-- eventid.js
|   |   |   |-- events.js
|   |   |   |-- eventtarget.js
|   |   |   |-- eventtype.js
|   |   |   |-- listenable.js
|   |   |   |-- listener.js
|   |   |   `-- listenermap.js
|   |   |-- fs
|   |   |   `-- url.js
|   |   |-- functions
|   |   |   `-- functions.js
|   |   |-- html
|   |   |   |-- legacyconversions.js
|   |   |   |-- safehtml.js
|   |   |   |-- safescript.js
|   |   |   |-- safestyle.js
|   |   |   |-- safestylesheet.js
|   |   |   |-- safeurl.js
|   |   |   |-- trustedresourceurl.js
|   |   |   |-- trustedtypes.js
|   |   |   `-- uncheckedconversions.js
|   |   |-- i18n
|   |   |   `-- bidi.js
|   |   |-- iter
|   |   |   `-- iter.js
|   |   |-- json
|   |   |   |-- hybrid.js
|   |   |   `-- json.js
|   |   |-- labs
|   |   |   `-- useragent
|   |   |       |-- browser.js
|   |   |       |-- engine.js
|   |   |       |-- platform.js
|   |   |       `-- util.js
|   |   |-- log
|   |   |   `-- log.js
|   |   |-- math
|   |   |   |-- coordinate.js
|   |   |   |-- integer.js
|   |   |   |-- long.js
|   |   |   |-- math.js
|   |   |   `-- size.js
|   |   |-- messaging
|   |   |   |-- abstractchannel.js
|   |   |   `-- messagechannel.js
|   |   |-- mochikit
|   |   |   `-- async
|   |   |       `-- deferred.js
|   |   |-- net
|   |   |   |-- errorcode.js
|   |   |   |-- eventtype.js
|   |   |   |-- httpstatus.js
|   |   |   |-- websocket.js
|   |   |   |-- wrapperxmlhttpfactory.js
|   |   |   |-- xhrio.js
|   |   |   |-- xhrlike.js
|   |   |   |-- xmlhttp.js
|   |   |   |-- xmlhttpfactory.js
|   |   |   `-- xpc
|   |   |       |-- crosspagechannel.js
|   |   |       |-- crosspagechannelrole.js
|   |   |       |-- directtransport.js
|   |   |       |-- nativemessagingtransport.js
|   |   |       |-- transport.js
|   |   |       `-- xpc.js
|   |   |-- object
|   |   |   `-- object.js
|   |   |-- promise
|   |   |   |-- promise.js
|   |   |   |-- resolver.js
|   |   |   `-- thenable.js
|   |   |-- reflect
|   |   |   `-- reflect.js
|   |   |-- string
|   |   |   |-- const.js
|   |   |   |-- internal.js
|   |   |   |-- string.js
|   |   |   |-- stringbuffer.js
|   |   |   |-- stringformat.js
|   |   |   `-- typedstring.js
|   |   |-- structs
|   |   |   |-- map.js
|   |   |   `-- structs.js
|   |   |-- timer
|   |   |   `-- timer.js
|   |   |-- uri
|   |   |   |-- uri.js
|   |   |   `-- utils.js
|   |   `-- useragent
|   |       |-- product.js
|   |       `-- useragent.js
|   |-- main.js
|   |-- my_cljs_project
|   |   |-- core.cljs
|   |   |-- core.cljs.cache.json
|   |   |-- core.js
|   |   `-- core.js.map
|   `-- process
|       |-- env.cljs
|       |-- env.cljs.cache.json
|       |-- env.js
|       `-- env.js.map
`-- src
    `-- my_cljs_project
        `-- core.cljs

83 directories, 211 files
#+end_example

#+begin_src eshell
tree -a ../..
#+end_src

* todo
** DONE сделать новый орг
положить поаналогии с предыдушим
/home/buyn/Dev/ClojureScript/tutorials/learn-cljs/code/lesson-30/notes/deps.edn

(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter-cljs-project.org")
** DONE посмотреть имя будушего приложения
** DONE запустить собраное
[[*run eshell in project root][run eshell in project root]]
** DONE как в гите вернуть один фаил
как откатить один фаил в гит
к вариаунту последнего комита?
** DONE как это сделать в магит
** за реплить
** попробывать пример с го
** поэксперементировать с каналами
*** открыть урок
*** запустить репл
*** сделатьт репл раздел в мануале
*** отправить команды и эксперементы
** начать вносить измения по книге
* arhiv
* 2025-04-28
** noter
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/noter/noter-cljs-project.org")
** from my-cljs-project.org
(find-file-other-frame "/home/buyn/Dev/ClojureScript/tutorials/my-cljs-project/my-cljs-project.org")
